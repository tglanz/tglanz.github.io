1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
2:HL["/_next/static/css/4e35fc7145142800.css","style",{"crossOrigin":""}]
0:["F5wa6sU7YK9iajx6_K5OJ",[[["",{"children":["articles",{"children":[["slug","kubernetes/technical-overview","c"],{"children":["__PAGE__?{\"slug\":[\"kubernetes\",\"technical-overview\"]}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4e35fc7145142800.css","precedence":"next","crossOrigin":""}]],"$L4"]]]]
5:HL["/_next/static/css/4bccb028aebe19da.css","style",{"crossOrigin":""}]
6:I[5420,["326","static/chunks/326-dcee1ff54fa4f70c.js","185","static/chunks/app/layout-99393772be94611b.js"],""]
7:I[6954,[],""]
8:I[7264,[],""]
b:I[8326,["954","static/chunks/d3ac728e-1e5d8b71e3d43fec.js","326","static/chunks/326-dcee1ff54fa4f70c.js","496","static/chunks/app/articles/%5B...slug%5D/page-2e651ae38096a6f7.js"],""]
c:T518,M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z3:[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_e66fe9 Layout_body__oXsmr","children":[["$","header",null,{"children":["$","$L6",null,{}]}],["$","main",null,{"className":"Layout_main__luTTh","children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"initialChildNode":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","articles","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","initialChildNode":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","articles","children",["slug","kubernetes/technical-overview","c"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","initialChildNode":["$L9","$La",null],"childPropSegment":"__PAGE__?{\"slug\":[\"kubernetes\",\"technical-overview\"]}","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4bccb028aebe19da.css","precedence":"next","crossOrigin":""}]]}],"childPropSegment":["slug","kubernetes/technical-overview","c"],"styles":null}],"childPropSegment":"articles","styles":null}]}],["$","footer",null,{"children":["$","div",null,{"className":"Footer_container__Z8cUU","children":[["$","$Lb",null,{"href":"https://il.linkedin.com/in/tal-glanzman","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 448 512","children":["$undefined",[["$","path","0",{"d":"M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z","children":"$undefined"}]]],"className":"$undefined","style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]}],["$","$Lb",null,{"href":"https://github.com/tglanz","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 496 512","children":["$undefined",[["$","path","0",{"d":"$c","children":"$undefined"}]]],"className":"$undefined","style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]}]]}]}]]}]}],null]
4:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Article"}],["$","meta","3",{"name":"description","content":"Personal site"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
d:I[6222,["954","static/chunks/d3ac728e-1e5d8b71e3d43fec.js","326","static/chunks/326-dcee1ff54fa4f70c.js","496","static/chunks/app/articles/%5B...slug%5D/page-2e651ae38096a6f7.js"],"ArticleContent"]
e:Tf68,
## Application packaging

An application should be

1. Packaged as a container
1. Wrapped in a _Pod_
1. Deployed via a declerative manifest file

## The declerative model 

According to the _declerative model_, we only declare about how we want the application to look like. It is Kubernetes' jpb to make sure the cluster behaves as intended.

_Manifests_ simple YAML files and they tell Kubernetes how the application should look like - the _desired state_.

_Controllers_ are constantly running and monitor the application's state, reconciling and difference betweeen the _observerd state_ and the _desired state_.

## Pods

In Kubernetes, _Pods_ are the atomic unit of scheduling. Kubernetes demands that every container runs inside a pod.

A simple model is to run a sigle container in every pod. 

Effectively, a _Pod_ is a construct for running one or more containers.

Pods are the most basic unit of scaling. We scale applications by adding or removing pods (not containers).

Pods are deployed atomiclly. A pod is ready only when all containers are up and running. A single pod executes on a single Node.

When a pod dies, a new one takes it's place. The new pod is a different instance with the same semantics, it has different id, ip etc..

Pods are immutable. If we want to change a pod's configuration, we must create a new pod to take it's place.

### Pod theory

There are 3 main reasons for Pods to exist

1. Pods augment containers 1. Pods assist in scheduling
1. Pods enable resource sharing

The augmentation is done in the following ways

- Labels / annotations
- Restart policies
- Probes (startup, readiness, liveness etc...)
- Affinity / anti-affinity rules (Affinities are related to specifying how specific pods behave with other pods)
- Termination control
- Security policies
- Resource requests and limits (min/max values on CPU, memory and I/O)

Pods have __Labels__ which lets us group Pods and associate them with other objects. 

Regarding resource sharing, Pods provide _shared execution environment_ for one or more containers. It includes

- Filesystem
- Network stack (IP address, routing, ports)
- Memory
- Volumes

Pods can be deployed either directly via a Pod manifest or indirectly via a controller. Pods deployed directly are called _static pods_.

## Deployments

A _Deployment_ is a higher-level controller. Usually we will deploy pods indirectly via a deployment.

The deployment controller monitors the state of a wrapped pod providing extra features such as self-healing, scaling, zero-downtime rollouts and versioned rollbacks.

## Services

A _Service_ is a Kubernetes contstruct which provides reliable networking for a set of pods.

As we know, pods are immutable and modifications due to auto scaling, rollbacks etc... result in replacements of pods - and the effective IPs.

_Services_ provide reliable names and IPs and provide load balancing capabilities over a set of pods.

## Examples of controllers

- Deployments
- DaemonSets
- StatefulSets

## Generall usefull commands

List all possible Pod attributes

    kubectl explain pods --recursive

## Multi container patterns

Kubernetes offers several well-defined multi-container Pod patterns

### Sidecar pattern

This pattern has a _main_ application container and a _sidecar_ container. The _sidecar's_ job is to augment and perform secondary tasks for the _main_ application container.

### Adapter pattern

This pattern is a specific variation of the _sidecar pattern_ where the _sidecar_ container takes non-standardized output from the _main_ container and standardize it as required by an external system.

### Ambassador pattern

This is another variation of the _sidecar pattern_ where the _sidecar_ brokers connectivity to an external system.

### Init pattern

This pattern has an _init_ container that's gauranteed to start and complete before your _main_ application container. It is also gauranteed to run exactly once!
f:T191b,<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
  </head>
  <body>
    <nav class="toc">
      <ol class="toc-level toc-level-1">
        <li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#application-packaging">Application packaging</a></li>
        <li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#the-declerative-model">The declerative model</a></li>
        <li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#pods">Pods</a></li>
        <li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#deployments">Deployments</a></li>
        <li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#services">Services</a></li>
        <li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#examples-of-controllers">Examples of controllers</a></li>
        <li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#generall-usefull-commands">Generall usefull commands</a></li>
        <li class="toc-item toc-item-h2"><a class="toc-link toc-link-h2" href="#multi-container-patterns">Multi container patterns</a></li>
      </ol>
    </nav>
    <h2 id="application-packaging">Application packaging</h2>
    <p>An application should be</p>
    <ol>
      <li>Packaged as a container</li>
      <li>Wrapped in a <em>Pod</em></li>
      <li>Deployed via a declerative manifest file</li>
    </ol>
    <h2 id="the-declerative-model">The declerative model</h2>
    <p>According to the <em>declerative model</em>, we only declare about how we want the application to look like. It is Kubernetes' jpb to make sure the cluster behaves as intended.</p>
    <p><em>Manifests</em> simple YAML files and they tell Kubernetes how the application should look like - the <em>desired state</em>.</p>
    <p><em>Controllers</em> are constantly running and monitor the application's state, reconciling and difference betweeen the <em>observerd state</em> and the <em>desired state</em>.</p>
    <h2 id="pods">Pods</h2>
    <p>In Kubernetes, <em>Pods</em> are the atomic unit of scheduling. Kubernetes demands that every container runs inside a pod.</p>
    <p>A simple model is to run a sigle container in every pod.</p>
    <p>Effectively, a <em>Pod</em> is a construct for running one or more containers.</p>
    <p>Pods are the most basic unit of scaling. We scale applications by adding or removing pods (not containers).</p>
    <p>Pods are deployed atomiclly. A pod is ready only when all containers are up and running. A single pod executes on a single Node.</p>
    <p>When a pod dies, a new one takes it's place. The new pod is a different instance with the same semantics, it has different id, ip etc..</p>
    <p>Pods are immutable. If we want to change a pod's configuration, we must create a new pod to take it's place.</p>
    <h3 id="pod-theory">Pod theory</h3>
    <p>There are 3 main reasons for Pods to exist</p>
    <ol>
      <li>Pods augment containers 1. Pods assist in scheduling</li>
      <li>Pods enable resource sharing</li>
    </ol>
    <p>The augmentation is done in the following ways</p>
    <ul>
      <li>Labels / annotations</li>
      <li>Restart policies</li>
      <li>Probes (startup, readiness, liveness etc...)</li>
      <li>Affinity / anti-affinity rules (Affinities are related to specifying how specific pods behave with other pods)</li>
      <li>Termination control</li>
      <li>Security policies</li>
      <li>Resource requests and limits (min/max values on CPU, memory and I/O)</li>
    </ul>
    <p>Pods have <strong>Labels</strong> which lets us group Pods and associate them with other objects.</p>
    <p>Regarding resource sharing, Pods provide <em>shared execution environment</em> for one or more containers. It includes</p>
    <ul>
      <li>Filesystem</li>
      <li>Network stack (IP address, routing, ports)</li>
      <li>Memory</li>
      <li>Volumes</li>
    </ul>
    <p>Pods can be deployed either directly via a Pod manifest or indirectly via a controller. Pods deployed directly are called <em>static pods</em>.</p>
    <h2 id="deployments">Deployments</h2>
    <p>A <em>Deployment</em> is a higher-level controller. Usually we will deploy pods indirectly via a deployment.</p>
    <p>The deployment controller monitors the state of a wrapped pod providing extra features such as self-healing, scaling, zero-downtime rollouts and versioned rollbacks.</p>
    <h2 id="services">Services</h2>
    <p>A <em>Service</em> is a Kubernetes contstruct which provides reliable networking for a set of pods.</p>
    <p>As we know, pods are immutable and modifications due to auto scaling, rollbacks etc... result in replacements of pods - and the effective IPs.</p>
    <p><em>Services</em> provide reliable names and IPs and provide load balancing capabilities over a set of pods.</p>
    <h2 id="examples-of-controllers">Examples of controllers</h2>
    <ul>
      <li>Deployments</li>
      <li>DaemonSets</li>
      <li>StatefulSets</li>
    </ul>
    <h2 id="generall-usefull-commands">Generall usefull commands</h2>
    <p>List all possible Pod attributes</p>
    <pre><code>kubectl explain pods --recursive
</code></pre>
    <h2 id="multi-container-patterns">Multi container patterns</h2>
    <p>Kubernetes offers several well-defined multi-container Pod patterns</p>
    <h3 id="sidecar-pattern">Sidecar pattern</h3>
    <p>This pattern has a <em>main</em> application container and a <em>sidecar</em> container. The <em>sidecar's</em> job is to augment and perform secondary tasks for the <em>main</em> application container.</p>
    <h3 id="adapter-pattern">Adapter pattern</h3>
    <p>This pattern is a specific variation of the <em>sidecar pattern</em> where the <em>sidecar</em> container takes non-standardized output from the <em>main</em> container and standardize it as required by an external system.</p>
    <h3 id="ambassador-pattern">Ambassador pattern</h3>
    <p>This is another variation of the <em>sidecar pattern</em> where the <em>sidecar</em> brokers connectivity to an external system.</p>
    <h3 id="init-pattern">Init pattern</h3>
    <p>This pattern has an <em>init</em> container that's gauranteed to start and complete before your <em>main</em> application container. It is also gauranteed to run exactly once!</p>
  </body>
</html>
a:["$","div",null,{"children":[["$","h1",null,{"children":"Kubernetes technical overview"}],["$","div",null,{"className":"Taxonomy_container__C2Vdb","children":["$","div",null,{"className":"Taxonomy_values__yvK16","children":[["$","$Lb","0",{"href":"/tags/Kubernetes","children":["$","div",null,{"className":"Chip_container__q1AW2","children":"Kubernetes"}]}]]}]}],["$","$Ld",null,{"content":{"raw":"$e","html":"$f"}}]]}]
9:null
