{"pageProps":{"article":{"id":"algorithms/dynamic-programming/longest-path-in-ordered-graph","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/algorithms/dynamic-programming/longest-path-in-ordered-graph.md","metadata":{"title":"Longest Path in Ordered Graph","description":null,"priority":0,"tags":["Dynamic Programming"],"categories":["Algorithms"],"toc":true},"content":{"raw":"\nA directed graph $G=(V, E)$ is **ordererd**  \n\nif\n$$\n  \\forall (v_i, v_j) \\in E \\Rightarrow i < j\n$$\n\nand\n$$\n  \\forall v_i \\in V / \\\\{ v_n \\\\} ~;~ \\exists j>i, e=(v_i, v_j) \\in E\n$$\n\n**The problem**\n\nGiven such graph, find the length of the longest path from $v_1$ to $v_n$ where $n = |V|$.\n\n**Illustration**\n\n{{< mermaid >}}\n  graph LR\n    v1 --> v2\n    v3 --> v4\n    v4 --> v5\n    v1 --> v4\n    v2 --> v4\n    v2 --> v5\n{{</ mermaid >}}\n\nFor this example, the longest path is $(v_1, v_2) \\rightarrow (v_2, v_4) \\rightarrow (v_4, v_5)$.\n\n**Solution**\n\nWe shall define $opt(i)$ to indicate the length of the longest path from $v_1$ to $v_i$ by\n\n$$\n  opt(0) = 0\n$$\n\n$$\n  opt(i)_{1 > 0} = 1 + \\max \\\\{ opt(k) | (v_k, v_i) \\in E \\\\}\n$$\n\nThe answer we are looking for is given by $opt(n)$.\n\nThe intuition here is breaking the problem into smaller subproblems. The most straight forward way of doing so is by starting from $v_1$ and incrementally adding more vertices into consideration.\n\n**Psuedo**\n\nAs always, pseudo is very important in dynamic programming algorithms in order to illustrate pattenr of building the data structure (bottom up).\n\n- Initialize opt\n  - $opt \\leftarrow array(n)$\n  - $opt[0] \\leftarrow 0$\n  - $\\forall i \\in \\\\{ 1, 2, ..., n \\\\}$\n    - $opt[i] \\leftarrow nil$\n- Build opt in a bottom up fashion\n  - $for ~ i \\leftarrow 1 ~ to ~ n$\n    - $opt[i] \\leftarrow 1 + \\max \\\\{ opt(k) | (v_k, v_i) \\in E \\\\}$\n- Return $opt[n]$\n\n**Time Complexity**\n\n- Initialization of opt is $O(n)$\n- Building opt takes $O(n)$ iterations\n  - Each iteration takes $O(n)$ accesses to opt\n\nSo in total, the time complexity is $O(n^2)$","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <nav class=\"toc\">\n      <ol class=\"toc-level toc-level-1\"></ol>\n    </nav>\n    <p>A directed graph $G=(V, E)$ is <strong>ordererd</strong></p>\n    <p>\n      if\n      $$\n      \\forall (v_i, v_j) \\in E \\Rightarrow i &#x3C; j\n      $$\n    </p>\n    <p>\n      and\n      $$\n      \\forall v_i \\in V / \\{ v_n \\} <del>;</del> \\exists j>i, e=(v_i, v_j) \\in E\n      $$\n    </p>\n    <p><strong>The problem</strong></p>\n    <p>Given such graph, find the length of the longest path from $v_1$ to $v_n$ where $n = |V|$.</p>\n    <p><strong>Illustration</strong></p>\n    <p>\n      {{&#x3C; mermaid >}}\n      graph LR\n      v1 --> v2\n      v3 --> v4\n      v4 --> v5\n      v1 --> v4\n      v2 --> v4\n      v2 --> v5\n      {{&#x3C;/ mermaid >}}\n    </p>\n    <p>For this example, the longest path is $(v_1, v_2) \\rightarrow (v_2, v_4) \\rightarrow (v_4, v_5)$.</p>\n    <p><strong>Solution</strong></p>\n    <p>We shall define $opt(i)$ to indicate the length of the longest path from $v_1$ to $v_i$ by</p>\n    <p>\n      $$\n      opt(0) = 0\n      $$\n    </p>\n    <p>\n      $$\n      opt(i)_{1 > 0} = 1 + \\max \\{ opt(k) | (v_k, v_i) \\in E \\}\n      $$\n    </p>\n    <p>The answer we are looking for is given by $opt(n)$.</p>\n    <p>The intuition here is breaking the problem into smaller subproblems. The most straight forward way of doing so is by starting from $v_1$ and incrementally adding more vertices into consideration.</p>\n    <p><strong>Psuedo</strong></p>\n    <p>As always, pseudo is very important in dynamic programming algorithms in order to illustrate pattenr of building the data structure (bottom up).</p>\n    <ul>\n      <li>Initialize opt\n        <ul>\n          <li>$opt \\leftarrow array(n)$</li>\n          <li>$opt[0] \\leftarrow 0$</li>\n          <li>$\\forall i \\in \\{ 1, 2, ..., n \\}$\n            <ul>\n              <li>$opt[i] \\leftarrow nil$</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>Build opt in a bottom up fashion\n        <ul>\n          <li>$for ~ i \\leftarrow 1 ~ to ~ n$\n            <ul>\n              <li>$opt[i] \\leftarrow 1 + \\max \\{ opt(k) | (v_k, v_i) \\in E \\}$</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>Return $opt[n]$</li>\n    </ul>\n    <p><strong>Time Complexity</strong></p>\n    <ul>\n      <li>Initialization of opt is $O(n)$</li>\n      <li>Building opt takes $O(n)$ iterations\n        <ul>\n          <li>Each iteration takes $O(n)$ accesses to opt</li>\n        </ul>\n      </li>\n    </ul>\n    <p>So in total, the time complexity is $O(n^2)$</p>\n  </body>\n</html>\n"}}},"__N_SSG":true}