{"pageProps":{"article":{"id":"posts/data-engineering-demystified-summary","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/posts/data-engineering-demystified-summary.md","metadata":{"title":"Data Engineering Demistified Summary","description":null,"permalink":null,"priority":0,"tags":[],"categories":[]},"content":{"raw":"\n# Demistified summary\n\nSee http://big-data-demystified.ninja\n\nSpecifically\n- http://big-data-demystified.ninja/2020/07/09/data-lake-architecture-best-practices\n\n## Using Version Control Systems\n\nEnvironment suggestions\n\n- Dev. Has Read only access of Production data.\n- Pre Production. Because some thing can only be tested against production.\n- Production.\n\n\n## Airflow Coding Guidlines\n\n**Keep it simple**. Avoid object oriented abstraction. Very hard to retrospectively understand DAGs, simplicity is king here.\n\n**Avoid using Sensors - Airflow Term?**. Unpredictabilty in production.\n\nIt is prefereable if Jobs are\n\n- Recurrentable - Running the same job again won't change nothing\n- Debugable - can debug the job easily\n- Write after Delete - When deleting data, insert it right after, don't do that in another stage \n**Monitoring is very important!!!**\n\nPros\n- flexibility\n- customizability\n- scale\n- cost\n\nCons\n- learning curve\n- diy\n- time to market\n- open source\n- unclear errors\n\n## Data lake\n\n1. Data quality - MonteCarlo, Great Expectations\n1. Data pipeline stability - Databand and Honey Comb\n1. Data lineage - Apache atlas, amundsen\n1. Data classification\n\n## Cleansing and Preparing data\n\nApproaches\n\n**Python parser**\n\nPros - Simple\nCons - non uniform, hard to maintain\n\n**Dataframe / Pandas**\n\nPros - Simple, Generic, Flexible\nCons - Not scalable, bounded to the RAM\n\n**ELT**\n\nPros - Simple, Generic, Peta-Scale \nCons - Requires Good SQL / Big Data understanding\n\n**Pyspark / Scala**\n\nCons\n- Hard to learn\n- Trivial for simple cases / overkill\n\nPros\n- Good for schema evolution\n\n## 3rd party - APIs, Tips and Tricks\n\n\n## 4 V's\n\n- Volume\n- Veracity\n- Velocity\n- Variety\n\n## Triangle\n\nWhat is the criteria?\n\n```\n       Faster\n\n    /          \\\n\nCheaper  -   Simpler\n```\n","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Demistified summary</h1>\n    <p>See <a href=\"http://big-data-demystified.ninja\">http://big-data-demystified.ninja</a></p>\n    <p>Specifically</p>\n    <ul>\n      <li><a href=\"http://big-data-demystified.ninja/2020/07/09/data-lake-architecture-best-practices\">http://big-data-demystified.ninja/2020/07/09/data-lake-architecture-best-practices</a></li>\n    </ul>\n    <h2>Using Version Control Systems</h2>\n    <p>Environment suggestions</p>\n    <ul>\n      <li>Dev. Has Read only access of Production data.</li>\n      <li>Pre Production. Because some thing can only be tested against production.</li>\n      <li>Production.</li>\n    </ul>\n    <h2>Airflow Coding Guidlines</h2>\n    <p><strong>Keep it simple</strong>. Avoid object oriented abstraction. Very hard to retrospectively understand DAGs, simplicity is king here.</p>\n    <p><strong>Avoid using Sensors - Airflow Term?</strong>. Unpredictabilty in production.</p>\n    <p>It is prefereable if Jobs are</p>\n    <ul>\n      <li>Recurrentable - Running the same job again won't change nothing</li>\n      <li>Debugable - can debug the job easily</li>\n      <li>\n        Write after Delete - When deleting data, insert it right after, don't do that in another stage\n        <strong>Monitoring is very important!!!</strong>\n      </li>\n    </ul>\n    <p>Pros</p>\n    <ul>\n      <li>flexibility</li>\n      <li>customizability</li>\n      <li>scale</li>\n      <li>cost</li>\n    </ul>\n    <p>Cons</p>\n    <ul>\n      <li>learning curve</li>\n      <li>diy</li>\n      <li>time to market</li>\n      <li>open source</li>\n      <li>unclear errors</li>\n    </ul>\n    <h2>Data lake</h2>\n    <ol>\n      <li>Data quality - MonteCarlo, Great Expectations</li>\n      <li>Data pipeline stability - Databand and Honey Comb</li>\n      <li>Data lineage - Apache atlas, amundsen</li>\n      <li>Data classification</li>\n    </ol>\n    <h2>Cleansing and Preparing data</h2>\n    <p>Approaches</p>\n    <p><strong>Python parser</strong></p>\n    <p>\n      Pros - Simple\n      Cons - non uniform, hard to maintain\n    </p>\n    <p><strong>Dataframe / Pandas</strong></p>\n    <p>\n      Pros - Simple, Generic, Flexible\n      Cons - Not scalable, bounded to the RAM\n    </p>\n    <p><strong>ELT</strong></p>\n    <p>\n      Pros - Simple, Generic, Peta-Scale\n      Cons - Requires Good SQL / Big Data understanding\n    </p>\n    <p><strong>Pyspark / Scala</strong></p>\n    <p>Cons</p>\n    <ul>\n      <li>Hard to learn</li>\n      <li>Trivial for simple cases / overkill</li>\n    </ul>\n    <p>Pros</p>\n    <ul>\n      <li>Good for schema evolution</li>\n    </ul>\n    <h2>3rd party - APIs, Tips and Tricks</h2>\n    <h2>4 V's</h2>\n    <ul>\n      <li>Volume</li>\n      <li>Veracity</li>\n      <li>Velocity</li>\n      <li>Variety</li>\n    </ul>\n    <h2>Triangle</h2>\n    <p>What is the criteria?</p>\n    <pre><code class=\"hljs language-properties\">       <span class=\"hljs-attr\">Faster</span>\n\n    <span class=\"hljs-attr\">/</span>          <span class=\"hljs-string\">\\\n</span>\n<span class=\"hljs-attr\">Cheaper</span>  <span class=\"hljs-string\">-   Simpler</span>\n</code></pre>\n  </body>\n</html>\n"}}},"__N_SSG":true}