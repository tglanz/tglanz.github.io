{"pageProps":{"article":{"id":"posts/vagrant-over-libvirt-arch","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/posts/vagrant-over-libvirt-arch.md","metadata":{"title":"Vagrant over libvirt on Archlinux","description":null,"priority":0,"tags":["Linux","Archlinux","Vagrant"],"categories":[],"toc":true},"content":{"raw":"\n# The tools\n\n[Vagrant](https://www.vagrantup.com/) is an open source software to virtualize development environments.\n\n[libvirt](https://libvit.org/) is an open source virtualization API. I think the [archwiki page](https://wiki.archlinux.org/title/Libvit) actually describes it better, as a collection of software that provides a way to manage virtualization functionality.\n\n[kvm](https://www.linux-kvm.org/page/Main_Page/) a short for **K**ernel-based **V**irtual **M**achine, is a virtualization infrastructure provided by the kernel.\n\n[QEMU](https://www.qemu.org/) is an open source machine emulator and virtualizer.\n\n# The stack\n\nVagrant will use the libvirt APIs which will be drived by QEMU utilizing kvm.\n\n```\n+-----------+\n|  Vagrant  |\n+-----------+\n|  libvirt  |\n+-----------+\n|  QEMU     |\n+-----------+\n|  KVM      |\n+-----------\n```\n\nTo install the stack we will need the following packages  \n- [vagrant](https://archlinux.org/packages/?name=vagrant)\n- [libvirt](https://archlinux.org/packages/?name=libvirt)\n- [iptables-nft](https://archlinux.org/packages/?name=iptables-nft)\n- [dnsmasq](https://archlinux.org/packages/?name=dnsmasq)\n- [qemu-headless](https://archlinux.org/packages/?name=qemu-headless)\n\nRun the command\n\n    pacman -Suy vagrant libvirt iptables-nft dnsmasq qemu-headless\n\n# Startup\n\nIn order to run the stack we need the following services running\n- libvirtd.service \n- virtlogd.service\n\nYou can either start them by running\n\n    systemctl start libvirtd virtlogd\n\nOr you can enable them by running\n\n    systemctl enable libvirtd virtlogd\n\nYou can check that everything is running by running\n\n    virsh -c qemu:///system\n\n> [virsh](https://linux.die.net/man/1/virsh) is a cli to interact with guest domains (virtual machines).\n\n# Starting out first Vagrant Box\n\nIn Vagrant's domain, a Box is a package format, a bit like an ISO or a docker image. We will start a ```debian/bullseye64``` Boxed OS.\n\nInside your working directory, there should be a configuration file that Vagrant can read and function by - It is the ```Vagrantfile```. The Vagrantfile contains configuration about what Box to run, how many resources to allocate and more.\n\nIn a new environment, we can either create a file manually or use Vagrants ```init``` command to do this for us. \n\n    vagrant init --minimal\n\nNow, lets edit the newly created Vagrantfile and set the parameter ```config.vm.box``` to \"debian/bullseye64\". Lets also add the following parameters  \n\nWe can always validate the Vagrantfile by running\n\n    vagrant validate\n\nAt this point, during validation, you might get an error like ```No usable default provider could be found for your system```. Thats fine, see next.\n\nVagrant uses a notion of Providers. A Provider is Vagrant's abstraction over the underlying hypervisor that vagrant will operate. In our case, as illustrated above, we use libvirt as the hypervisor so we will need to install the relevant Provider. To install the Provider we will use Vagrant's Plugins mechanism and run\n\n    vagrant plugin install vagrant-libvirt\n\nNow we are finally ready to run the Box by running the command\n\n    vagrant up --provider=libvirt\n\nSome errors you might encounter\n\n**Some error about polkit indicates permission issues**. Read about it for best scenario solution, as a quick and easy solution, add your user to the libvirt group\n\n**Some error about your machine not supporting NFS.** Just install nfs-utils by running\n\n    pacman -Syu nfs-utils\n\n**Forevr waiting on IP acquisition.** I still havn't completely figured this out. It looks somethong about DNS and DHCP. What I did find out that some Boxes do not get this issue, try changing.\n\nTo ssh into the OS run\n\n    vagrant ssh\n\nTo clean up run\n\n    vagrant destroy\n\n# Other tools\n\n__virt-manager__ is a graphical tool to list and manage the guest domains.\n","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <nav class=\"toc\">\n      <ol class=\"toc-level toc-level-1\">\n        <li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#the-tools\">The tools</a></li>\n        <li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#the-stack\">The stack</a></li>\n        <li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#startup\">Startup</a></li>\n        <li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#starting-out-first-vagrant-box\">Starting out first Vagrant Box</a></li>\n        <li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#other-tools\">Other tools</a></li>\n      </ol>\n    </nav>\n    <h1 id=\"the-tools\">The tools</h1>\n    <p><a href=\"https://www.vagrantup.com/\">Vagrant</a> is an open source software to virtualize development environments.</p>\n    <p><a href=\"https://libvit.org/\">libvirt</a> is an open source virtualization API. I think the <a href=\"https://wiki.archlinux.org/title/Libvit\">archwiki page</a> actually describes it better, as a collection of software that provides a way to manage virtualization functionality.</p>\n    <p><a href=\"https://www.linux-kvm.org/page/Main_Page/\">kvm</a> a short for <strong>K</strong>ernel-based <strong>V</strong>irtual <strong>M</strong>achine, is a virtualization infrastructure provided by the kernel.</p>\n    <p><a href=\"https://www.qemu.org/\">QEMU</a> is an open source machine emulator and virtualizer.</p>\n    <h1 id=\"the-stack\">The stack</h1>\n    <p>Vagrant will use the libvirt APIs which will be drived by QEMU utilizing kvm.</p>\n    <pre><code class=\"hljs language-asciidoc\"><span class=\"hljs-code\">+-----------+</span>\n<span class=\"hljs-section\">|  Vagrant  |\n+-----------+</span>\n<span class=\"hljs-section\">|  libvirt  |\n+-----------+</span>\n<span class=\"hljs-section\">|  QEMU     |\n+-----------+</span>\n<span class=\"hljs-section\">|  KVM      |\n+-----------</span>\n</code></pre>\n    <p>To install the stack we will need the following packages</p>\n    <ul>\n      <li><a href=\"https://archlinux.org/packages/?name=vagrant\">vagrant</a></li>\n      <li><a href=\"https://archlinux.org/packages/?name=libvirt\">libvirt</a></li>\n      <li><a href=\"https://archlinux.org/packages/?name=iptables-nft\">iptables-nft</a></li>\n      <li><a href=\"https://archlinux.org/packages/?name=dnsmasq\">dnsmasq</a></li>\n      <li><a href=\"https://archlinux.org/packages/?name=qemu-headless\">qemu-headless</a></li>\n    </ul>\n    <p>Run the command</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">pacman</span> <span class=\"hljs-string\">-Suy vagrant libvirt iptables-nft dnsmasq qemu-headless</span>\n</code></pre>\n    <h1 id=\"startup\">Startup</h1>\n    <p>In order to run the stack we need the following services running</p>\n    <ul>\n      <li>libvirtd.service</li>\n      <li>virtlogd.service</li>\n    </ul>\n    <p>You can either start them by running</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">start libvirtd virtlogd</span>\n</code></pre>\n    <p>Or you can enable them by running</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">systemctl</span> <span class=\"hljs-string\">enable libvirtd virtlogd</span>\n</code></pre>\n    <p>You can check that everything is running by running</p>\n    <pre><code class=\"hljs language-perl\">virsh -c qemu:<span class=\"hljs-regexp\">//</span>/<span class=\"hljs-keyword\">system</span>\n</code></pre>\n    <blockquote>\n      <p><a href=\"https://linux.die.net/man/1/virsh\">virsh</a> is a cli to interact with guest domains (virtual machines).</p>\n    </blockquote>\n    <h1 id=\"starting-out-first-vagrant-box\">Starting out first Vagrant Box</h1>\n    <p>In Vagrant's domain, a Box is a package format, a bit like an ISO or a docker image. We will start a <code>debian/bullseye64</code> Boxed OS.</p>\n    <p>Inside your working directory, there should be a configuration file that Vagrant can read and function by - It is the <code>Vagrantfile</code>. The Vagrantfile contains configuration about what Box to run, how many resources to allocate and more.</p>\n    <p>In a new environment, we can either create a file manually or use Vagrants <code>init</code> command to do this for us.</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">vagrant</span> <span class=\"hljs-string\">init --minimal</span>\n</code></pre>\n    <p>Now, lets edit the newly created Vagrantfile and set the parameter <code>config.vm.box</code> to \"debian/bullseye64\". Lets also add the following parameters</p>\n    <p>We can always validate the Vagrantfile by running</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">vagrant</span> <span class=\"hljs-string\">validate</span>\n</code></pre>\n    <p>At this point, during validation, you might get an error like <code>No usable default provider could be found for your system</code>. Thats fine, see next.</p>\n    <p>Vagrant uses a notion of Providers. A Provider is Vagrant's abstraction over the underlying hypervisor that vagrant will operate. In our case, as illustrated above, we use libvirt as the hypervisor so we will need to install the relevant Provider. To install the Provider we will use Vagrant's Plugins mechanism and run</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">vagrant</span> <span class=\"hljs-string\">plugin install vagrant-libvirt</span>\n</code></pre>\n    <p>Now we are finally ready to run the Box by running the command</p>\n    <pre><code class=\"hljs language-ini\">vagrant up <span class=\"hljs-attr\">--provider</span>=libvirt\n</code></pre>\n    <p>Some errors you might encounter</p>\n    <p><strong>Some error about polkit indicates permission issues</strong>. Read about it for best scenario solution, as a quick and easy solution, add your user to the libvirt group</p>\n    <p><strong>Some error about your machine not supporting NFS.</strong> Just install nfs-utils by running</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">pacman</span> <span class=\"hljs-string\">-Syu nfs-utils</span>\n</code></pre>\n    <p><strong>Forevr waiting on IP acquisition.</strong> I still havn't completely figured this out. It looks somethong about DNS and DHCP. What I did find out that some Boxes do not get this issue, try changing.</p>\n    <p>To ssh into the OS run</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">vagrant</span> <span class=\"hljs-string\">ssh</span>\n</code></pre>\n    <p>To clean up run</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">vagrant</span> <span class=\"hljs-string\">destroy</span>\n</code></pre>\n    <h1 id=\"other-tools\">Other tools</h1>\n    <p><strong>virt-manager</strong> is a graphical tool to list and manage the guest domains.</p>\n  </body>\n</html>\n"}}},"__N_SSG":true}