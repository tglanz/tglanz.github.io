{"pageProps":{"category":"Domain Driven Design","articles":[{"id":"ddd/applying","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/ddd/applying.md","metadata":{"title":"Applying","description":null,"permalink":null,"priority":0,"tags":[],"categories":["Domain Driven Design"]},"content":{"raw":"\n## Identify the possible Subdomains\n\n1. Core\n2. Support\n3. Generic\n\n## Split the Domain into Subdomains\n\nIf possible apply a single _Bounded Context_ for each _Subdomain_","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h2>Identify the possible Subdomains</h2>\n    <ol>\n      <li>Core</li>\n      <li>Support</li>\n      <li>Generic</li>\n    </ol>\n    <h2>Split the Domain into Subdomains</h2>\n    <p>If possible apply a single <em>Bounded Context</em> for each <em>Subdomain</em></p>\n  </body>\n</html>\n"}},{"id":"ddd/model-refinement-steps","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/ddd/model-refinement-steps.md","metadata":{"title":"Model Refinement Steps","description":null,"permalink":null,"priority":0,"tags":[],"categories":["Domain Driven Design"]},"content":{"raw":"\n# Distinguishing Entities and Value Objects\n\nConsider each object in turn and try to identify an identity.\n\nConsider\n- How to track the entity?\n- Are to instances with same values are the same?\n- Can it exist without some parent object?\n\n# Designing Associations\n\nSpecify traversal directions.\n\nConsider\n- How the is application used?\n\nAvoid\n- Bi-Directional associations\n\n# Identifying Aggregate Boundaries\n\n# Selecting Repositories\n\n# Walking through scenarios\n\n# Iterate\n","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Distinguishing Entities and Value Objects</h1>\n    <p>Consider each object in turn and try to identify an identity.</p>\n    <p>Consider</p>\n    <ul>\n      <li>How to track the entity?</li>\n      <li>Are to instances with same values are the same?</li>\n      <li>Can it exist without some parent object?</li>\n    </ul>\n    <h1>Designing Associations</h1>\n    <p>Specify traversal directions.</p>\n    <p>Consider</p>\n    <ul>\n      <li>How the is application used?</li>\n    </ul>\n    <p>Avoid</p>\n    <ul>\n      <li>Bi-Directional associations</li>\n    </ul>\n    <h1>Identifying Aggregate Boundaries</h1>\n    <h1>Selecting Repositories</h1>\n    <h1>Walking through scenarios</h1>\n    <h1>Iterate</h1>\n  </body>\n</html>\n"}},{"id":"ddd/prologue","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/ddd/prologue.md","metadata":{"title":"Domain Driven Design, Prologue","description":null,"permalink":null,"priority":0,"tags":[],"categories":["Domain Driven Design"]},"content":{"raw":"","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body></body>\n</html>\n"}},{"id":"ddd/tactical-design","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/ddd/tactical-design.md","metadata":{"title":"Tactical Design","description":null,"permalink":null,"priority":0,"tags":[],"categories":["Domain Driven Design"]},"content":{"raw":"\n# Entities\n\nEntities are the building blocks of the model.\n\nEntities are differentiated by their Id, not by their attributes.\n\n# Value Objects\n\nValue objects are differentiated by their attributes and contain no Id.\n\nValue objects should be able to implemented in an immutable fashion.\n\n# Services\n\nIn the exact same words\n\n> A SERVICE is an operation offered as an interface that stands alone in the model, without encapsulating state, as ENTITIES and VALUE OBJECTS do.\n\nCharacterisitcs of a good SERVICE\n1. The operation relates to a domain concept that is not a natural part of an ENTITY or VALUE OBJECT\n1. The interface is defined in terms of other elements of the domain model\n1. The operation is stateless\n\n# Aggregates\n\nIn the exact same words\n\n> An AGGREGATE is a cluster of associated objects that we treat as a unit for the purpose of data changes\n\nEach AGGREGATE has a **root** and a **boundary**.\n\nThe **boundary** delineate objects within the AGGREGATE.\n\nThe **root** is a *single*, *specific* ENTITY that the outside can hold references to.\n\n# Factories\n\nIn the exact same words\n\n> When creation of an object, or an entire AGGREGATE, becomes complicated or reveals too much of the internal structure, FACTORIES provide encapsulation\n\nWhile every ENTITY has a constructor receiving it's idetity, FACTORIES will provide mechanisms to create complex ENTITIES and AGGREGATES.\n\nFACTORIES are responsible for ensuring that all invariants are met for the AGGREGATE's objects.\n\n# Repositories\n\nIn the exact same words\n\n> A REPOSITORY represents all objects of a certain type as a conceptual set (usually emulated).\n\nThe REPOSITORIES act like collections but they often provide additional query mechanisms/options.\n","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Entities</h1>\n    <p>Entities are the building blocks of the model.</p>\n    <p>Entities are differentiated by their Id, not by their attributes.</p>\n    <h1>Value Objects</h1>\n    <p>Value objects are differentiated by their attributes and contain no Id.</p>\n    <p>Value objects should be able to implemented in an immutable fashion.</p>\n    <h1>Services</h1>\n    <p>In the exact same words</p>\n    <blockquote>\n      <p>A SERVICE is an operation offered as an interface that stands alone in the model, without encapsulating state, as ENTITIES and VALUE OBJECTS do.</p>\n    </blockquote>\n    <p>Characterisitcs of a good SERVICE</p>\n    <ol>\n      <li>The operation relates to a domain concept that is not a natural part of an ENTITY or VALUE OBJECT</li>\n      <li>The interface is defined in terms of other elements of the domain model</li>\n      <li>The operation is stateless</li>\n    </ol>\n    <h1>Aggregates</h1>\n    <p>In the exact same words</p>\n    <blockquote>\n      <p>An AGGREGATE is a cluster of associated objects that we treat as a unit for the purpose of data changes</p>\n    </blockquote>\n    <p>Each AGGREGATE has a <strong>root</strong> and a <strong>boundary</strong>.</p>\n    <p>The <strong>boundary</strong> delineate objects within the AGGREGATE.</p>\n    <p>The <strong>root</strong> is a <em>single</em>, <em>specific</em> ENTITY that the outside can hold references to.</p>\n    <h1>Factories</h1>\n    <p>In the exact same words</p>\n    <blockquote>\n      <p>When creation of an object, or an entire AGGREGATE, becomes complicated or reveals too much of the internal structure, FACTORIES provide encapsulation</p>\n    </blockquote>\n    <p>While every ENTITY has a constructor receiving it's idetity, FACTORIES will provide mechanisms to create complex ENTITIES and AGGREGATES.</p>\n    <p>FACTORIES are responsible for ensuring that all invariants are met for the AGGREGATE's objects.</p>\n    <h1>Repositories</h1>\n    <p>In the exact same words</p>\n    <blockquote>\n      <p>A REPOSITORY represents all objects of a certain type as a conceptual set (usually emulated).</p>\n    </blockquote>\n    <p>The REPOSITORIES act like collections but they often provide additional query mechanisms/options.</p>\n  </body>\n</html>\n"}}]},"__N_SSG":true}