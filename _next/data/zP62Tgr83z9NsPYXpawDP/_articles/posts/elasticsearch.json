{"pageProps":{"article":{"id":"posts/elasticsearch","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/posts/elasticsearch.md","metadata":{"title":"Elasticsearch","description":null,"permalink":null,"priority":0,"tags":[],"categories":[]},"content":{"raw":"\nConcepts and examples to get reminded of once in a whilei\n\n## What is Elasticsearch \n\n_Elasticsearch_ is a distributed search and analytics engine, providing a _near real-time_ search for a large array of data types, structured or un-structured.\n\nSome of the usecases\n- Backend for search boxes\n- Metrics and Log analysis\n\nElasticsearch uses _Apache Lucene_ under the hood as it's underlying search engine.\n\n## Documents & Indices\n\nTechnically, and I quote - \"Elasticsearch is a distributed documented store\". It serializes any kind of structure into JSON documents. In an Elasticsearch cluster, the documents are distributed accross multiple nodes and are accessible from any (really?) of the nodes.\n\n__TODO__ Are the documents distributed accross all nodes, or a part of the cluster? It actually seems unreasonable to me that it is a full replication.\n\nElasticsearch maintains an _Inverted Index_ to provide fast search capabilities on all of a document's fields (They say that a document is fully searchable within 1 sec). Practically, the index is the data structure the collects multiple documents and provides fast access to them according to search criteria.\n\nWe can think of the model as such\n```\nField\n    key: String\n    value: Any\n\nDocument\n    fields: Field[]\n\nIndex\n    documents: Document[]\n```\n\nBy default, Elasticsearch index all fields in all documents, and it has different mehcanisms to index different data types.\n\n## Search & Aggregations\n\nElasticsearch provides a REST API that supports\n- Structured queries -  Queries that are structurely similiar to SQL queries\n- Full text queries - Queries that return all documents that match the query, sorted by relevance\n- Complex queries - A combination of the above\n\nElasticsearch can maintain aggregations of the data enabling us to analyze summaries providing insights regarding metrics, patterns and trends. For example, we can query for\n- Total numbers that match X\n- The average that match Y\n\nFurthermore, aggregations can operate alongside the search requests, meaning that we can gain aggregative information for all search results.\n\n### cat API\n\nThe ```_cat``` endpoint provides \"Compact and Aligned Text\" meaning, a general, __consumed by humans__ information.\n\nGet the list of cat APIs\n\n    /_cat\n\nGet information about indices using [cat indices API](https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-indices.html)\n\n    /_cat/indices\n    /_cat/indices/_all\n    /_cat/indices?format=json\n    /_cat/indices/my-index\n    /_cat/indices/my-index?format=json\n\n### search API\n\nThe ```<target>/_search``` endpoint provides searching functionality.\n\nThe ```<target>``` parameter is optional and is a comma seperated list indicating data streams, indices and aliases to search. It supports wildcards (*).\n\nThere are many query parameters that affects how the search is being performed and how the results are being returned. We won't list them all here but here is a small list that give a vibe on the kind of possible parameters\n\n- q(string) - The query. Note that it can alternetively be provided through the body\n- explain(boolean) - If true, returns a defailed information about the score computation  \n- timeout(time units) - Sets the timeout for the request  \n- from(integer) - Starting document offset  \n- size(integer) - Number of hits to return  \n\nThe body also contains important information the important one is the \"query\" field.\n\n### shards\n\nShow shards\n\n    /_cat/shards\n    /_cat/shards?h=index,shard\n","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <p>Concepts and examples to get reminded of once in a whilei</p>\n    <h2>What is Elasticsearch</h2>\n    <p><em>Elasticsearch</em> is a distributed search and analytics engine, providing a <em>near real-time</em> search for a large array of data types, structured or un-structured.</p>\n    <p>Some of the usecases</p>\n    <ul>\n      <li>Backend for search boxes</li>\n      <li>Metrics and Log analysis</li>\n    </ul>\n    <p>Elasticsearch uses <em>Apache Lucene</em> under the hood as it's underlying search engine.</p>\n    <h2>Documents &#x26; Indices</h2>\n    <p>Technically, and I quote - \"Elasticsearch is a distributed documented store\". It serializes any kind of structure into JSON documents. In an Elasticsearch cluster, the documents are distributed accross multiple nodes and are accessible from any (really?) of the nodes.</p>\n    <p><strong>TODO</strong> Are the documents distributed accross all nodes, or a part of the cluster? It actually seems unreasonable to me that it is a full replication.</p>\n    <p>Elasticsearch maintains an <em>Inverted Index</em> to provide fast search capabilities on all of a document's fields (They say that a document is fully searchable within 1 sec). Practically, the index is the data structure the collects multiple documents and provides fast access to them according to search criteria.</p>\n    <p>We can think of the model as such</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">Field</span>\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">String</span>\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">Any</span>\n\n<span class=\"hljs-attr\">Document</span>\n    <span class=\"hljs-attr\">fields</span>: <span class=\"hljs-string\">Field[]</span>\n\n<span class=\"hljs-attr\">Index</span>\n    <span class=\"hljs-attr\">documents</span>: <span class=\"hljs-string\">Document[]</span>\n</code></pre>\n    <p>By default, Elasticsearch index all fields in all documents, and it has different mehcanisms to index different data types.</p>\n    <h2>Search &#x26; Aggregations</h2>\n    <p>Elasticsearch provides a REST API that supports</p>\n    <ul>\n      <li>Structured queries - Queries that are structurely similiar to SQL queries</li>\n      <li>Full text queries - Queries that return all documents that match the query, sorted by relevance</li>\n      <li>Complex queries - A combination of the above</li>\n    </ul>\n    <p>Elasticsearch can maintain aggregations of the data enabling us to analyze summaries providing insights regarding metrics, patterns and trends. For example, we can query for</p>\n    <ul>\n      <li>Total numbers that match X</li>\n      <li>The average that match Y</li>\n    </ul>\n    <p>Furthermore, aggregations can operate alongside the search requests, meaning that we can gain aggregative information for all search results.</p>\n    <h3>cat API</h3>\n    <p>The <code>_cat</code> endpoint provides \"Compact and Aligned Text\" meaning, a general, <strong>consumed by humans</strong> information.</p>\n    <p>Get the list of cat APIs</p>\n    <pre><code class=\"hljs language-bash\">/_cat\n</code></pre>\n    <p>Get information about indices using <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-indices.html\">cat indices API</a></p>\n    <pre><code class=\"hljs language-awk\"><span class=\"hljs-regexp\">/_cat/i</span>ndices\n<span class=\"hljs-regexp\">/_cat/i</span>ndices/_all\n<span class=\"hljs-regexp\">/_cat/i</span>ndices?format=json\n<span class=\"hljs-regexp\">/_cat/i</span>ndices/my-index\n<span class=\"hljs-regexp\">/_cat/i</span>ndices/my-index?format=json\n</code></pre>\n    <h3>search API</h3>\n    <p>The <code>&#x3C;target>/_search</code> endpoint provides searching functionality.</p>\n    <p>The <code>&#x3C;target></code> parameter is optional and is a comma seperated list indicating data streams, indices and aliases to search. It supports wildcards (*).</p>\n    <p>There are many query parameters that affects how the search is being performed and how the results are being returned. We won't list them all here but here is a small list that give a vibe on the kind of possible parameters</p>\n    <ul>\n      <li>q(string) - The query. Note that it can alternetively be provided through the body</li>\n      <li>explain(boolean) - If true, returns a defailed information about the score computation</li>\n      <li>timeout(time units) - Sets the timeout for the request</li>\n      <li>from(integer) - Starting document offset</li>\n      <li>size(integer) - Number of hits to return</li>\n    </ul>\n    <p>The body also contains important information the important one is the \"query\" field.</p>\n    <h3>shards</h3>\n    <p>Show shards</p>\n    <pre><code class=\"hljs language-awk\"><span class=\"hljs-regexp\">/_cat/</span>shards\n<span class=\"hljs-regexp\">/_cat/</span>shards?h=index,shard\n</code></pre>\n  </body>\n</html>\n"}}},"__N_SSG":true}