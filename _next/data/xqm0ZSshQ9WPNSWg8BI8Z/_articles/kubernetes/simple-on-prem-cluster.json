{"pageProps":{"article":{"id":"kubernetes/simple-on-prem-cluster","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/kubernetes/simple-on-prem-cluster.md","metadata":{"title":"Simple on-prem Kuberenetes cluster","description":null,"priority":0,"tags":["Kubernetes"],"categories":["Kubernetes"],"toc":true},"content":{"raw":"\n# Kubes\n\nDeploy a kubernetes cluster.\n\nWe will setup a simple kubernetes cluster will describe the concepts and process.\n\nThe OS on all nodes is debian bullseye - I specifically executing this using vagrant's box ```debian/bullseye64```.\n\nTo document the steps we will provide bash script snippets for now. But, the goal is to provide configuration files content for something like ansible or chef.\n\n## Container runtime\n\nKubernetes is an orchestration infrastructure and does not provide any containerization - It relies on a different containarization platform, a.k.a the [Container Runtime](https://kubernetes.io/docs/setup/production-environment/container-runtimes/).\n\nWe will use [docker](https://www.docker.com/). Let's install it by following the documentation [Here](https://docs.docker.com/engine/install/debian/).\n\n```\nsudo apt-get remove docker docker-engine docker.io containerd runc\n\nsudo apt-get update\nsudo apt-get install ca-certificates curl gnupg lsb-release\n\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io\n```\n\nAnother thing to do is docker to utilize systemd for cgroup management (You can read more about it in the container runtimes documentation). To apply this setting we need to edit docker's configuration. There are multiple to do so, for example - edit systemd's service that initiates docker. Another approach is to edit docker's global configuration file which is at ```/etc/docker/daemon.json```. Hence, edit (create if missing) the mentioned file and add\n\n```json\n{\n    ... other configurations\n    \"exec-opts\": [\"native.cgroupdriver=systemd\", ... more exec opts if exists]\n}\n```\n\nOnce done, reboot docker by running ```sudo systemctl restart docker```\n\n## Kube Components\n\nWe will not rely on the package manager to install the components.\n\nDefine the relevant variables\n\n> Note that the cni directory does not include the version! Later we will install a network plugin, it'll be in the same directory\n\n```\nARCH=\"amd64\"\nCNI_VERSION=\"v0.8.2\"\nCNI_DIR=\"/opt/cni/bin\"\nCRICTL_VERSION=\"v1.23.0\"\nCRICTL_DIR=\"/opt/cri/$CRICTL_VERSION/bin\"\nKUBERNETES_VERSION=\"v1.23.3\"\nKUBERNETES_DIR=\"/opt/kubernetes/$KUBERNETES_VERSION\"\n\n# Install [CNI](https://www.cni.dev/)\n\nsudo mkdir -p $CNI_DIR\ncurl -L \"https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-linux-${ARCH}-${CNI_VERSION}.tgz\" | sudo tar -C $CNI_DIR -xz\n\n# Install [CRI](https://kubernetes.io/docs/concepts/architecture/cri/)\n\nsudo mkdir -p $CRICTL_DIR\ncurl -L \"https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-linux-${ARCH}.tar.gz\" | sudo tar -C $CRICTL_DIR -xz\n\n# Install Kube components\n\nsudo mkdir -p $KUBERNETES_DIR\ncd $KUBERNETES_DIR\nfor component in kubeadm kubectl kubelet; do\n  sudo curl -L --remote-name-all https://storage.googleapis.com/kubernetes-release/release/$KUBERNETES_VERSION/bin/linux/$ARCH/$component\n  sudo chmod +x $component\ndone\n\n# and services\n\nRELEASE_VERSION=\"v0.4.0\"\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service\" | sed \"s:/usr/bin:${KUBERNETES_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service\nsudo mkdir -p /etc/systemd/system/kubelet.service.d\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf\" | sed \"s:/usr/bin:${KUBERNETES_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n```\n\nenable, and start kubelet\n\n```\nsudo systemctl enable --now kubelet\n```\n\n## Initialization\n\nInstall prerequesites for kubeadm\n\n```\nsudo apt-get update \nsudo apt install ethtool socat conntrack\n```\n\nCreate an update alternative\n\n```\nsudo update-alternatives --install /usr/bin/kubeadm kubeadm $KUBERNETES_DIR/kubeadm 100\nsudo update-alternatives --install /usr/bin/kubelet kubelet $KUBERNETES_DIR/kubelet 100\nsudo update-alternatives --install /usr/bin/kubectl kubectl $KUBERNETES_DIR/kubectl 100\n```\n\nRun @controlplane\n\n> TODO: load balancer, hostnames\n\nInitialize configuration such that the network is 10.10.0.0/16\n\n```\nsudo kubeadm init --pod-network-cidr 10.10.0.0/16 --apiserver-advertise-address {ip}\n```\n\nFor documentation, you should see something like\n\n```\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG=/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.121.210:6443 --token clns4a.b29f6anjipygy0e2 \\\n\t--discovery-token-ca-cert-hash sha256:833f599cc9ab27eb5010c499e9c77e8e3263fb991d8e9e78ef187ba97e1efb59\n```\n\nDo as it says, run\n\n```\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\nWe will use [Weave Net](https://kubernetes.io/docs/tasks/administer-cluster/network-policy-provider/weave-network-policy/) as a network plugin\n\n```\nkubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')\"\n```\n","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <nav class=\"toc\">\n      <ol class=\"toc-level toc-level-1\">\n        <li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#kubes\">Kubes</a>\n          <ol class=\"toc-level toc-level-2\">\n            <li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#container-runtime\">Container runtime</a></li>\n            <li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#kube-components\">Kube Components</a></li>\n            <li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#initialization\">Initialization</a></li>\n          </ol>\n        </li>\n      </ol>\n    </nav>\n    <h1 id=\"kubes\">Kubes</h1>\n    <p>Deploy a kubernetes cluster.</p>\n    <p>We will setup a simple kubernetes cluster will describe the concepts and process.</p>\n    <p>The OS on all nodes is debian bullseye - I specifically executing this using vagrant's box <code>debian/bullseye64</code>.</p>\n    <p>To document the steps we will provide bash script snippets for now. But, the goal is to provide configuration files content for something like ansible or chef.</p>\n    <h2 id=\"container-runtime\">Container runtime</h2>\n    <p>Kubernetes is an orchestration infrastructure and does not provide any containerization - It relies on a different containarization platform, a.k.a the <a href=\"https://kubernetes.io/docs/setup/production-environment/container-runtimes/\">Container Runtime</a>.</p>\n    <p>We will use <a href=\"https://www.docker.com/\">docker</a>. Let's install it by following the documentation <a href=\"https://docs.docker.com/engine/install/debian/\">Here</a>.</p>\n    <pre><code class=\"hljs language-basic\">sudo apt-<span class=\"hljs-keyword\">get</span> <span class=\"hljs-comment\">remove docker docker-engine docker.io containerd runc</span>\n\nsudo apt-<span class=\"hljs-keyword\">get</span> update\nsudo apt-<span class=\"hljs-keyword\">get</span> install ca-certificates curl gnupg lsb-release\n\ncurl -fsSL https://download.docker.<span class=\"hljs-keyword\">com</span>/linux/debian/gpg | sudo gpg --dearmor -o /<span class=\"hljs-keyword\">usr</span>/share/keyrings/docker-archive-keyring.gpg\n\necho \\\n  <span class=\"hljs-string\">\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \\\n  $(lsb_release -cs) stable\"</span> | sudo tee /etc/apt/sources.<span class=\"hljs-keyword\">list</span>.d/docker.<span class=\"hljs-keyword\">list</span> > /dev/null\n\nsudo apt-<span class=\"hljs-keyword\">get</span> update\nsudo apt-<span class=\"hljs-keyword\">get</span> install docker-ce docker-ce-cli containerd.io\n</code></pre>\n    <p>Another thing to do is docker to utilize systemd for cgroup management (You can read more about it in the container runtimes documentation). To apply this setting we need to edit docker's configuration. There are multiple to do so, for example - edit systemd's service that initiates docker. Another approach is to edit docker's global configuration file which is at <code>/etc/docker/daemon.json</code>. Hence, edit (create if missing) the mentioned file and add</p>\n    <pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n    ... other configurations\n    <span class=\"hljs-attr\">\"exec-opts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"native.cgroupdriver=systemd\"</span><span class=\"hljs-punctuation\">,</span> ... more exec opts if exists<span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n    <p>Once done, reboot docker by running <code>sudo systemctl restart docker</code></p>\n    <h2 id=\"kube-components\">Kube Components</h2>\n    <p>We will not rely on the package manager to install the components.</p>\n    <p>Define the relevant variables</p>\n    <blockquote>\n      <p>Note that the cni directory does not include the version! Later we will install a network plugin, it'll be in the same directory</p>\n    </blockquote>\n    <pre><code class=\"hljs language-bash\">ARCH=<span class=\"hljs-string\">\"amd64\"</span>\nCNI_VERSION=<span class=\"hljs-string\">\"v0.8.2\"</span>\nCNI_DIR=<span class=\"hljs-string\">\"/opt/cni/bin\"</span>\nCRICTL_VERSION=<span class=\"hljs-string\">\"v1.23.0\"</span>\nCRICTL_DIR=<span class=\"hljs-string\">\"/opt/cri/<span class=\"hljs-variable\">$CRICTL_VERSION</span>/bin\"</span>\nKUBERNETES_VERSION=<span class=\"hljs-string\">\"v1.23.3\"</span>\nKUBERNETES_DIR=<span class=\"hljs-string\">\"/opt/kubernetes/<span class=\"hljs-variable\">$KUBERNETES_VERSION</span>\"</span>\n\n<span class=\"hljs-comment\"># Install [CNI](https://www.cni.dev/)</span>\n\nsudo <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-variable\">$CNI_DIR</span>\ncurl -L <span class=\"hljs-string\">\"https://github.com/containernetworking/plugins/releases/download/<span class=\"hljs-variable\">${CNI_VERSION}</span>/cni-plugins-linux-<span class=\"hljs-variable\">${ARCH}</span>-<span class=\"hljs-variable\">${CNI_VERSION}</span>.tgz\"</span> | sudo tar -C <span class=\"hljs-variable\">$CNI_DIR</span> -xz\n\n<span class=\"hljs-comment\"># Install [CRI](https://kubernetes.io/docs/concepts/architecture/cri/)</span>\n\nsudo <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-variable\">$CRICTL_DIR</span>\ncurl -L <span class=\"hljs-string\">\"https://github.com/kubernetes-sigs/cri-tools/releases/download/<span class=\"hljs-variable\">${CRICTL_VERSION}</span>/crictl-<span class=\"hljs-variable\">${CRICTL_VERSION}</span>-linux-<span class=\"hljs-variable\">${ARCH}</span>.tar.gz\"</span> | sudo tar -C <span class=\"hljs-variable\">$CRICTL_DIR</span> -xz\n\n<span class=\"hljs-comment\"># Install Kube components</span>\n\nsudo <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-variable\">$KUBERNETES_DIR</span>\n<span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$KUBERNETES_DIR</span>\n<span class=\"hljs-keyword\">for</span> component <span class=\"hljs-keyword\">in</span> kubeadm kubectl kubelet; <span class=\"hljs-keyword\">do</span>\n  sudo curl -L --remote-name-all https://storage.googleapis.com/kubernetes-release/release/<span class=\"hljs-variable\">$KUBERNETES_VERSION</span>/bin/linux/<span class=\"hljs-variable\">$ARCH</span>/<span class=\"hljs-variable\">$component</span>\n  sudo <span class=\"hljs-built_in\">chmod</span> +x <span class=\"hljs-variable\">$component</span>\n<span class=\"hljs-keyword\">done</span>\n\n<span class=\"hljs-comment\"># and services</span>\n\nRELEASE_VERSION=<span class=\"hljs-string\">\"v0.4.0\"</span>\ncurl -sSL <span class=\"hljs-string\">\"https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">${RELEASE_VERSION}</span>/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service\"</span> | sed <span class=\"hljs-string\">\"s:/usr/bin:<span class=\"hljs-variable\">${KUBERNETES_DIR}</span>:g\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service\nsudo <span class=\"hljs-built_in\">mkdir</span> -p /etc/systemd/system/kubelet.service.d\ncurl -sSL <span class=\"hljs-string\">\"https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">${RELEASE_VERSION}</span>/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf\"</span> | sed <span class=\"hljs-string\">\"s:/usr/bin:<span class=\"hljs-variable\">${KUBERNETES_DIR}</span>:g\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n</code></pre>\n    <p>enable, and start kubelet</p>\n    <pre><code class=\"hljs language-pgsql\">sudo systemctl <span class=\"hljs-keyword\">enable</span> <span class=\"hljs-comment\">--now kubelet</span>\n</code></pre>\n    <h2 id=\"initialization\">Initialization</h2>\n    <p>Install prerequesites for kubeadm</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">sudo</span> <span class=\"hljs-string\">apt-get update </span>\n<span class=\"hljs-attr\">sudo</span> <span class=\"hljs-string\">apt install ethtool socat conntrack</span>\n</code></pre>\n    <p>Create an update alternative</p>\n    <pre><code class=\"hljs language-awk\">sudo update-alternatives --install <span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/kubeadm kubeadm $KUBERNETES_DIR/</span>kubeadm <span class=\"hljs-number\">100</span>\nsudo update-alternatives --install <span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/kubelet kubelet $KUBERNETES_DIR/</span>kubelet <span class=\"hljs-number\">100</span>\nsudo update-alternatives --install <span class=\"hljs-regexp\">/usr/</span>bin<span class=\"hljs-regexp\">/kubectl kubectl $KUBERNETES_DIR/</span>kubectl <span class=\"hljs-number\">100</span>\n</code></pre>\n    <p>Run @controlplane</p>\n    <blockquote>\n      <p>TODO: load balancer, hostnames</p>\n    </blockquote>\n    <p>Initialize configuration such that the network is 10.10.0.0/16</p>\n    <pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">sudo</span> kubeadm init --pod-network-cidr <span class=\"hljs-number\">10.10.0.0</span>/<span class=\"hljs-number\">16</span> --apiserver-advertise-address {ip}\n</code></pre>\n    <p>For documentation, you should see something like</p>\n    <pre><code class=\"hljs language-pgsql\">Your Kubernetes control-plane has initialized successfully!\n\n<span class=\"hljs-keyword\">To</span> <span class=\"hljs-keyword\">start</span> <span class=\"hljs-keyword\">using</span> your <span class=\"hljs-keyword\">cluster</span>, you need <span class=\"hljs-keyword\">to</span> run the <span class=\"hljs-keyword\">following</span> <span class=\"hljs-keyword\">as</span> a regular <span class=\"hljs-keyword\">user</span>:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/<span class=\"hljs-keyword\">admin</span>.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nAlternatively, <span class=\"hljs-keyword\">if</span> you are the root <span class=\"hljs-keyword\">user</span>, you can run:\n\n  export KUBECONFIG=/etc/kubernetes/<span class=\"hljs-keyword\">admin</span>.conf\n\nYou should now deploy a pod network <span class=\"hljs-keyword\">to</span> the <span class=\"hljs-keyword\">cluster</span>.\nRun \"kubectl apply -f [podnetwork].yaml\" <span class=\"hljs-keyword\">with</span> one <span class=\"hljs-keyword\">of</span> the <span class=\"hljs-keyword\">options</span> listed at:\n  https://kubernetes.io/docs/concepts/<span class=\"hljs-keyword\">cluster</span>-administration/addons/\n\n<span class=\"hljs-keyword\">Then</span> you can <span class=\"hljs-keyword\">join</span> <span class=\"hljs-keyword\">any</span> number <span class=\"hljs-keyword\">of</span> worker nodes <span class=\"hljs-keyword\">by</span> running the <span class=\"hljs-keyword\">following</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">each</span> <span class=\"hljs-keyword\">as</span> root:\n\nkubeadm <span class=\"hljs-keyword\">join</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.121</span><span class=\"hljs-number\">.210</span>:<span class=\"hljs-number\">6443</span> <span class=\"hljs-comment\">--token clns4a.b29f6anjipygy0e2 \\</span>\n\t<span class=\"hljs-comment\">--discovery-token-ca-cert-hash sha256:833f599cc9ab27eb5010c499e9c77e8e3263fb991d8e9e78ef187ba97e1efb59</span>\n</code></pre>\n    <p>Do as it says, run</p>\n    <pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-variable\">$HOME</span>/.kube\nsudo <span class=\"hljs-built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube/config\nsudo <span class=\"hljs-built_in\">chown</span> $(<span class=\"hljs-built_in\">id</span> -u):$(<span class=\"hljs-built_in\">id</span> -g) <span class=\"hljs-variable\">$HOME</span>/.kube/config\n</code></pre>\n    <p>We will use <a href=\"https://kubernetes.io/docs/tasks/administer-cluster/network-policy-provider/weave-network-policy/\">Weave Net</a> as a network plugin</p>\n    <pre><code class=\"hljs language-powershell\">kubectl apply <span class=\"hljs-operator\">-f</span> <span class=\"hljs-string\">\"https://cloud.weave.works/k8s/net?k8s-version=<span class=\"hljs-variable\">$</span>(kubectl version | base64 | tr -d '\\n')\"</span>\n</code></pre>\n  </body>\n</html>\n"}}},"__N_SSG":true}