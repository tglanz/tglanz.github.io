{"pageProps":{"article":{"id":"kubernetes/deployments","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/kubernetes/deployments.md","metadata":{"title":"Kubernetes Deployments","description":null,"permalink":null,"priority":0,"tags":["Kubernetes"],"categories":["Kubernetes"]},"content":{"raw":"\n# Deployments\n\nA _Deployment_ manages _ReplicaSets_ and _ReplicaSets_ manage _Pods_.\n\n_ReplicaSet_ manage _Pods_ and bring self-healing and scaling capabilities while _Deployments_ manage _ReplicaSets_ and add rollout and rollback capabilities.\n\n### Self-healing and scalability\n\nIf _Pods_ managed by a _Deployment_ fail, they will be replaced - this is known as _self healing_.\n\nIf _Pods_ managed by a _Deployment_ see increased/decreased load, they will be _scaled_.\n\nIn Kubernetes there are 3 related concepts\n\n- _desired state_\n- _observerd state_\n- _reconciliation_\n\n_ReplicaSets_ are implemented as a controller running background process comparing the _desired state_ vs the _observed state_. If they are different it contacts the cluster to perform _reconciliation_.\n\n### Rolling updates\n\nZero downtime, rolling updates (a.k.a rollouts) can be supported when a service has backward and forward compatibility. One by one, the _ReplicaSet_ bring a replica down and introduces a new one with the designated version until all of the _Pods_ are updated with the desired version.\n\nIt is crucial that the services be stateless and backward/forward compatible for this to work.\n\n### Rollbacks\n\n### Commands\n\nTo scale a _Deployment_\n\n    kubectl scale deployment {deployment-name} --replicas {number-of-replicas}\n\nAfter changing image versions, initiate rollouts simply by reaplying a manifest\n\n    kubectl apply -f {manifest-path}\n\nWe can monitor the rollout progress by\n\n    kubectl rollout status deployment {deployment-name}\n\nTo pause a rollout\n\n    kubectl rollout pause deployment {deployment-name}\n\nTo resume a rollout\n\n    kubectl rollout resume deployment {deployment-name}\n\nIn the manifests we can specify ```revisionHistoryLimit``` for containers. \n\nTo show rollout history\n\n    kubectl rollout history deployment {deployment-name}\n\nTo rollback to a revision\n\n    kubectl rollout undo deployment {deployment-name} --to-revision={revision-number}\n\n\n","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <nav class=\"toc\">\n      <ol class=\"toc-level toc-level-1\">\n        <li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#deployments\">Deployments</a></li>\n      </ol>\n    </nav>\n    <h1 id=\"deployments\">Deployments</h1>\n    <p>A <em>Deployment</em> manages <em>ReplicaSets</em> and <em>ReplicaSets</em> manage <em>Pods</em>.</p>\n    <p><em>ReplicaSet</em> manage <em>Pods</em> and bring self-healing and scaling capabilities while <em>Deployments</em> manage <em>ReplicaSets</em> and add rollout and rollback capabilities.</p>\n    <h3 id=\"self-healing-and-scalability\">Self-healing and scalability</h3>\n    <p>If <em>Pods</em> managed by a <em>Deployment</em> fail, they will be replaced - this is known as <em>self healing</em>.</p>\n    <p>If <em>Pods</em> managed by a <em>Deployment</em> see increased/decreased load, they will be <em>scaled</em>.</p>\n    <p>In Kubernetes there are 3 related concepts</p>\n    <ul>\n      <li><em>desired state</em></li>\n      <li><em>observerd state</em></li>\n      <li><em>reconciliation</em></li>\n    </ul>\n    <p><em>ReplicaSets</em> are implemented as a controller running background process comparing the <em>desired state</em> vs the <em>observed state</em>. If they are different it contacts the cluster to perform <em>reconciliation</em>.</p>\n    <h3 id=\"rolling-updates\">Rolling updates</h3>\n    <p>Zero downtime, rolling updates (a.k.a rollouts) can be supported when a service has backward and forward compatibility. One by one, the <em>ReplicaSet</em> bring a replica down and introduces a new one with the designated version until all of the <em>Pods</em> are updated with the desired version.</p>\n    <p>It is crucial that the services be stateless and backward/forward compatible for this to work.</p>\n    <h3 id=\"rollbacks\">Rollbacks</h3>\n    <h3 id=\"commands\">Commands</h3>\n    <p>To scale a <em>Deployment</em></p>\n    <pre><code class=\"hljs language-fortran\">kubectl <span class=\"hljs-built_in\">scale</span> deployment {deployment-<span class=\"hljs-keyword\">name</span>} --replicas {<span class=\"hljs-keyword\">number</span>-of-replicas}\n</code></pre>\n    <p>After changing image versions, initiate rollouts simply by reaplying a manifest</p>\n    <pre><code class=\"hljs language-puppet\">kubectl apply -<span class=\"hljs-keyword\">f</span> {<span class=\"hljs-literal\">manifest</span>-<span class=\"hljs-built_in\">path</span>}\n</code></pre>\n    <p>We can monitor the rollout progress by</p>\n    <pre><code class=\"hljs language-fortran\">kubectl rollout <span class=\"hljs-keyword\">status</span> deployment {deployment-<span class=\"hljs-keyword\">name</span>}\n</code></pre>\n    <p>To pause a rollout</p>\n    <pre><code class=\"hljs language-fortran\">kubectl rollout <span class=\"hljs-keyword\">pause</span> deployment {deployment-<span class=\"hljs-keyword\">name</span>}\n</code></pre>\n    <p>To resume a rollout</p>\n    <pre><code class=\"hljs language-basic\">kubectl rollout <span class=\"hljs-keyword\">resume</span> deployment {deployment-<span class=\"hljs-keyword\">name</span>}\n</code></pre>\n    <p>In the manifests we can specify <code>revisionHistoryLimit</code> for containers.</p>\n    <p>To show rollout history</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">kubectl</span> <span class=\"hljs-string\">rollout history deployment {deployment-name}</span>\n</code></pre>\n    <p>To rollback to a revision</p>\n    <pre><code class=\"hljs language-vim\">kubectl rollout <span class=\"hljs-keyword\">undo</span> deployment {deployment-name} --<span class=\"hljs-keyword\">to</span>-revision={revision-<span class=\"hljs-keyword\">number</span>}\n</code></pre>\n  </body>\n</html>\n"}}},"__N_SSG":true}