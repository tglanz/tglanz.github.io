{"pageProps":{"category":"Aws","articles":[{"id":"aws/best-practices","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/aws/best-practices.md","metadata":{"title":"Aws, Best practices","description":null,"permalink":null,"priority":0,"tags":[],"categories":["Aws"]},"content":{"raw":"\n### Do not use the root acount for any task that is not required to be performed by a root user\n\nWhat else can we do then? Create a different user and specifically control permissions.\n\nEven ceating an Administrator user is good - The point is, the use the account owner.","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h3>Do not use the root acount for any task that is not required to be performed by a root user</h3>\n    <p>What else can we do then? Create a different user and specifically control permissions.</p>\n    <p>Even ceating an Administrator user is good - The point is, the use the account owner.</p>\n  </body>\n</html>\n"}},{"id":"aws/bullets","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/aws/bullets.md","metadata":{"title":"Aws, Bullets","description":null,"permalink":null,"priority":0,"tags":[],"categories":["Aws"]},"content":{"raw":"\n# Available Storage Types\n\n- Block\n    - EBS\n- File\n    - EFS\n    - FSx Lustre\n    - FSx Windows\n- Block\n    - S3\n    - Glacier\n\n# EBS Volume Types\n\n**EBS** is a block storage.\n\nIt provides one of the following volume types, with the following categories\n\n- Solid state (SSD)\n    - General Purpose SSD - Provides a sane cost/performance balance\n    - Provisioned IOPS SSD - High performance, mission-critical, low latency and high-throughput\n- Hard disk drives (HDD)\n    - Throughput Optimized HDD - Low cost HDD for throughput intensive workloads\n    - Cold HDD - Lowest cost HDD for less frequently accessed workloads\n- Previous generation\n\n# ELB\n\n- Application Load Balancer (ALB) - Works at application layer (layer 7 osi) HTTP/HTTPS\n    - Host based routing - Balance using the host and port portion of the url (scheme://host:port/path)\n    - Path based routing - Balance using the path portion of the url (scheme://host:port/path)\n\n- Network Load Balancer (NLB) - Works at the network layer (layer 4 osi) IP\n\n# Route53 routing policies\n\n- Simple Round Robin - Route the user in a round robin fashion accross servers\n- Weighted - Weight precentage of routes for each server\n- Geolocation - Route the user to the geographically nearest server\n\n# EC2 Instance Types\n\n- General Purpose (m4)\n- Compute Optimized\n- Memory Optimized\n- Accelerated Computing - Using hardware accelerators\n- Storage Optimized\n- High Memory - Acquired only using special request\n","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Available Storage Types</h1>\n    <ul>\n      <li>Block\n        <ul>\n          <li>EBS</li>\n        </ul>\n      </li>\n      <li>File\n        <ul>\n          <li>EFS</li>\n          <li>FSx Lustre</li>\n          <li>FSx Windows</li>\n        </ul>\n      </li>\n      <li>Block\n        <ul>\n          <li>S3</li>\n          <li>Glacier</li>\n        </ul>\n      </li>\n    </ul>\n    <h1>EBS Volume Types</h1>\n    <p><strong>EBS</strong> is a block storage.</p>\n    <p>It provides one of the following volume types, with the following categories</p>\n    <ul>\n      <li>Solid state (SSD)\n        <ul>\n          <li>General Purpose SSD - Provides a sane cost/performance balance</li>\n          <li>Provisioned IOPS SSD - High performance, mission-critical, low latency and high-throughput</li>\n        </ul>\n      </li>\n      <li>Hard disk drives (HDD)\n        <ul>\n          <li>Throughput Optimized HDD - Low cost HDD for throughput intensive workloads</li>\n          <li>Cold HDD - Lowest cost HDD for less frequently accessed workloads</li>\n        </ul>\n      </li>\n      <li>Previous generation</li>\n    </ul>\n    <h1>ELB</h1>\n    <ul>\n      <li>\n        <p>Application Load Balancer (ALB) - Works at application layer (layer 7 osi) HTTP/HTTPS</p>\n        <ul>\n          <li>Host based routing - Balance using the host and port portion of the url (scheme://host:port/path)</li>\n          <li>Path based routing - Balance using the path portion of the url (scheme://host:port/path)</li>\n        </ul>\n      </li>\n      <li>\n        <p>Network Load Balancer (NLB) - Works at the network layer (layer 4 osi) IP</p>\n      </li>\n    </ul>\n    <h1>Route53 routing policies</h1>\n    <ul>\n      <li>Simple Round Robin - Route the user in a round robin fashion accross servers</li>\n      <li>Weighted - Weight precentage of routes for each server</li>\n      <li>Geolocation - Route the user to the geographically nearest server</li>\n    </ul>\n    <h1>EC2 Instance Types</h1>\n    <ul>\n      <li>General Purpose (m4)</li>\n      <li>Compute Optimized</li>\n      <li>Memory Optimized</li>\n      <li>Accelerated Computing - Using hardware accelerators</li>\n      <li>Storage Optimized</li>\n      <li>High Memory - Acquired only using special request</li>\n    </ul>\n  </body>\n</html>\n"}},{"id":"aws/cli","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/aws/cli.md","metadata":{"title":"Aws, The cli","description":null,"permalink":null,"priority":0,"tags":[],"categories":["Aws"]},"content":{"raw":"\nThe _aws cli_ is a utility that captures all of the administration capabilities with aws.\n\n## Configuration\n\nWe can apply initial configuration using the `configure` command which will create a default configuration. This configuration is called a __profile__. For any action, if no profile is specified, the default one will be used.\n\n\nAlternatively, we can create named profiles and use each separately and specifically. The selected profile is determined using a cli argument or by an environment variable (AWS_PROFILE).\n\n{{< alert \"Perhaps providing a test environment as the default is the safest option!\" >}}\n\n## Cli vs Console\n\nThis is probably subjective, but I highly advocate the use of the cli.","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <p>The <em>aws cli</em> is a utility that captures all of the administration capabilities with aws.</p>\n    <h2>Configuration</h2>\n    <p>We can apply initial configuration using the <code>configure</code> command which will create a default configuration. This configuration is called a <strong>profile</strong>. For any action, if no profile is specified, the default one will be used.</p>\n    <p>Alternatively, we can create named profiles and use each separately and specifically. The selected profile is determined using a cli argument or by an environment variable (AWS_PROFILE).</p>\n    <p>{{&#x3C; alert \"Perhaps providing a test environment as the default is the safest option!\" >}}</p>\n    <h2>Cli vs Console</h2>\n    <p>This is probably subjective, but I highly advocate the use of the cli.</p>\n  </body>\n</html>\n"}},{"id":"aws/kinesis","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/aws/kinesis.md","metadata":{"title":null,"description":null,"permalink":null,"priority":0,"tags":[],"categories":["Aws"]},"content":{"raw":"\nList streams\n\n    aws kinesis list-streams\n\nDescribe a _Stream_, listing it's _Shards_, _Stream's_ ARN, current _SequenceNumbers_ etc...\n\n    aws kinesis list-streams --stream-name {stream-name}\n\nTo list the consumers/producers of a given _Stream_\n\n    aws kinesis list-stream-consumers --stream-arn {stream-arn}\n\n## Getting records\n\n_ShardIterator_ is an object used to iterate _Records_ within a specific _Shard_. So, in order to get a _Shard's_ _Records_ we need to acquire a reference to a specific _ShardIterator_.\n\n    aws kines get-shard-iterator --stream-name {stream-name} --shard-id {shard-id} --shard-iterator-type {shard-iterator-type}\n\nThe ```shard-iterator-type``` has multiple choices, advise the documentation for those.\n\nThe ```get-shard-iterator``` command provided us with an identifier of the _ShardIterator_, we can use it to get _Records_ using\n\n    aws kinesis get-records --shard-iterator {shard-iterator}\n","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <p>List streams</p>\n    <pre><code class=\"hljs language-dsconfig\"><span class=\"hljs-string\">aws</span> <span class=\"hljs-string\">kinesis</span> <span class=\"hljs-built_in\">list-streams</span>\n</code></pre>\n    <p>Describe a <em>Stream</em>, listing it's <em>Shards</em>, <em>Stream's</em> ARN, current <em>SequenceNumbers</em> etc...</p>\n    <pre><code class=\"hljs language-dsconfig\"><span class=\"hljs-string\">aws</span> <span class=\"hljs-string\">kinesis</span> <span class=\"hljs-built_in\">list-streams</span> <span class=\"hljs-built_in\">--stream-name</span> {<span class=\"hljs-string\">stream-name</span>}\n</code></pre>\n    <p>To list the consumers/producers of a given <em>Stream</em></p>\n    <pre><code class=\"hljs language-dsconfig\"><span class=\"hljs-string\">aws</span> <span class=\"hljs-string\">kinesis</span> <span class=\"hljs-built_in\">list-stream-consumers</span> <span class=\"hljs-built_in\">--stream-arn</span> {<span class=\"hljs-string\">stream-arn</span>}\n</code></pre>\n    <h2>Getting records</h2>\n    <p><em>ShardIterator</em> is an object used to iterate <em>Records</em> within a specific <em>Shard</em>. So, in order to get a <em>Shard's</em> <em>Records</em> we need to acquire a reference to a specific <em>ShardIterator</em>.</p>\n    <pre><code class=\"hljs language-dsconfig\"><span class=\"hljs-string\">aws</span> <span class=\"hljs-string\">kines</span> <span class=\"hljs-built_in\">get-shard-iterator</span> <span class=\"hljs-built_in\">--stream-name</span> {<span class=\"hljs-string\">stream-name</span>} <span class=\"hljs-built_in\">--shard-id</span> {<span class=\"hljs-string\">shard-id</span>} <span class=\"hljs-built_in\">--shard-iterator-type</span> {<span class=\"hljs-string\">shard-iterator-type</span>}\n</code></pre>\n    <p>The <code>shard-iterator-type</code> has multiple choices, advise the documentation for those.</p>\n    <p>The <code>get-shard-iterator</code> command provided us with an identifier of the <em>ShardIterator</em>, we can use it to get <em>Records</em> using</p>\n    <pre><code class=\"hljs language-dsconfig\"><span class=\"hljs-string\">aws</span> <span class=\"hljs-string\">kinesis</span> <span class=\"hljs-built_in\">get-records</span> <span class=\"hljs-built_in\">--shard-iterator</span> {<span class=\"hljs-string\">shard-iterator</span>}\n</code></pre>\n  </body>\n</html>\n"}},{"id":"aws/services","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/aws/services.md","metadata":{"title":"Services","description":null,"permalink":null,"priority":0,"tags":[],"categories":["Aws"]},"content":{"raw":"\n# S3\n\n- Object-Based, Serverless, Unlimited storage service\n- Data is replicated across at least 3 AZs which ensures 99.99% __Availability__ and 11' 9s of __Durability__\n- Objects contain data and can have size for 0 Byts to 5 Terabytes\n- Buckets names are unique globally and contain either Objects or Folders (which in turn contain Objects)\n\n- __Lifecycle Management__ is a mechanism to delete/move objects between __Storage Classes__ based on schedule or some criteria\n\n[Exampro Cheatsheet](https://youtu.be/Ia-UEYYR44s?t=3524)\n\nTypes of Replication\n- Cross-Region Replication (CRR) - Bucket is **asynchronously** replicated to another region\n- Same-Region Replication (SRR) - Bucket is **asynchronously** replicated to the same region\n\n# Snowball\n\n- Snowball\n- Snoball Edge\n- Snowmobile\n\n# VPC\n\n- VPC Peering\n- Route Tables\n- Internet Gateway\n- Bastion / Jumpbox\n- Direct Connect\n\n## VPC Endpoints\n\n- Interface Endpoints\n- Gateway Endpoints\n\n## VPC Flow Logs\n\n# NACL\n\n# Security Groups \n\n# NAT\n\n# IAM\n\n# COGNITO\n\n# DNS\n\n# Route 53\n\n# EC2\n\n## EC2 Pricing\n\n## AMI\n\n## Auto Scaling Groups\n\n## ELB\n\n# EFS\n\n# EBS\n\n# Cloud Front\n\n# Aurora\n\n# Redshift\n\n# DynamoDB\n\n# CloudFormation\n\n# CloudWatch\n\n# CloudTrail\n\n# Lambda\n\n# SQS\n\n# SNS\n\n# ElasticCache\n\n# High Availability\n\n# Elastic Beanstalk\n\n# Kinesis\n\nRealtime processing platform.\n\n# Storage Gateway\n\nProvides on-premise storage access to cloud storage.\n\nPractically you install a VM on the on-premise host which will can be connected as NFS/SMB.\n\nStorage Types\n- S3 File Gateway\n- FSx File Gateway\n- Tape Gateway\n- Volume Gateway\n\nModes\n- Gateway Stored - Access data in the VM and synchronously get data from remote\n- Cached Stored - Frequently accessed data is cached at the VM and data is invalidated asynchronously\n","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>S3</h1>\n    <ul>\n      <li>\n        <p>Object-Based, Serverless, Unlimited storage service</p>\n      </li>\n      <li>\n        <p>Data is replicated across at least 3 AZs which ensures 99.99% <strong>Availability</strong> and 11' 9s of <strong>Durability</strong></p>\n      </li>\n      <li>\n        <p>Objects contain data and can have size for 0 Byts to 5 Terabytes</p>\n      </li>\n      <li>\n        <p>Buckets names are unique globally and contain either Objects or Folders (which in turn contain Objects)</p>\n      </li>\n      <li>\n        <p><strong>Lifecycle Management</strong> is a mechanism to delete/move objects between <strong>Storage Classes</strong> based on schedule or some criteria</p>\n      </li>\n    </ul>\n    <p><a href=\"https://youtu.be/Ia-UEYYR44s?t=3524\">Exampro Cheatsheet</a></p>\n    <p>Types of Replication</p>\n    <ul>\n      <li>Cross-Region Replication (CRR) - Bucket is <strong>asynchronously</strong> replicated to another region</li>\n      <li>Same-Region Replication (SRR) - Bucket is <strong>asynchronously</strong> replicated to the same region</li>\n    </ul>\n    <h1>Snowball</h1>\n    <ul>\n      <li>Snowball</li>\n      <li>Snoball Edge</li>\n      <li>Snowmobile</li>\n    </ul>\n    <h1>VPC</h1>\n    <ul>\n      <li>VPC Peering</li>\n      <li>Route Tables</li>\n      <li>Internet Gateway</li>\n      <li>Bastion / Jumpbox</li>\n      <li>Direct Connect</li>\n    </ul>\n    <h2>VPC Endpoints</h2>\n    <ul>\n      <li>Interface Endpoints</li>\n      <li>Gateway Endpoints</li>\n    </ul>\n    <h2>VPC Flow Logs</h2>\n    <h1>NACL</h1>\n    <h1>Security Groups</h1>\n    <h1>NAT</h1>\n    <h1>IAM</h1>\n    <h1>COGNITO</h1>\n    <h1>DNS</h1>\n    <h1>Route 53</h1>\n    <h1>EC2</h1>\n    <h2>EC2 Pricing</h2>\n    <h2>AMI</h2>\n    <h2>Auto Scaling Groups</h2>\n    <h2>ELB</h2>\n    <h1>EFS</h1>\n    <h1>EBS</h1>\n    <h1>Cloud Front</h1>\n    <h1>Aurora</h1>\n    <h1>Redshift</h1>\n    <h1>DynamoDB</h1>\n    <h1>CloudFormation</h1>\n    <h1>CloudWatch</h1>\n    <h1>CloudTrail</h1>\n    <h1>Lambda</h1>\n    <h1>SQS</h1>\n    <h1>SNS</h1>\n    <h1>ElasticCache</h1>\n    <h1>High Availability</h1>\n    <h1>Elastic Beanstalk</h1>\n    <h1>Kinesis</h1>\n    <p>Realtime processing platform.</p>\n    <h1>Storage Gateway</h1>\n    <p>Provides on-premise storage access to cloud storage.</p>\n    <p>Practically you install a VM on the on-premise host which will can be connected as NFS/SMB.</p>\n    <p>Storage Types</p>\n    <ul>\n      <li>S3 File Gateway</li>\n      <li>FSx File Gateway</li>\n      <li>Tape Gateway</li>\n      <li>Volume Gateway</li>\n    </ul>\n    <p>Modes</p>\n    <ul>\n      <li>Gateway Stored - Access data in the VM and synchronously get data from remote</li>\n      <li>Cached Stored - Frequently accessed data is cached at the VM and data is invalidated asynchronously</li>\n    </ul>\n  </body>\n</html>\n"}}]},"__N_SSG":true}