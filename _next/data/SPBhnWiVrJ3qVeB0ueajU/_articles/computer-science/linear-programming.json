{"pageProps":{"article":{"id":"computer-science/linear-programming","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/computer-science/linear-programming.md","metadata":{"title":"Linear Programming","description":null,"permalink":null,"priority":0,"tags":[],"categories":[]},"content":{"raw":"\n# Introduction\n\nBefore we define what Linear Programming is, let's take a look at an example:\n\nAssume we want to make a diet. Our job is to prepare meals would to minimize the amount of calories that we consume while consuming at least $60gr$ of protein, $70gr$ fat and $350gr$ of carbon.\n\nEvery ingredient contain a certain amount of calories, protein, fat and carbons. For simplicity, let's assume we have 3 ingredients at our disposal:\n\nIngredient | Calories | Protein | Fat | Carbons\n-----------|----------|---------|-----|----------\n1          | 50       | 4       | 10  | 25\n2          | 30       | 5       | 4   | 32\n3          | 60       | 8       | 7   | 12\n\nWe can compose a meal using the above ingredient however we like. Let $x_1, x_2$ and $x_3$ be the number of units we use for ingredients $1,2$ and $3$ accordingly.\n\nOur objective is to minimize the expression\n$$ 50x_1 + 30x_2 + 60x_2 $$\n\nUnder the constraint that we cannot pick a negative number of ingredients\n$$ x_1, x_2, x_3 \\geq 0 $$\n\nAnd under the minimum Protein consumption constraint\n$$ 4x_1 + 5x_2 + 8x_3 \\geq 60 $$\n\nAnd under the minimum Fat consumption constraint\n$$ 10x_1 + 4x_2 + 7x_3 \\geq 70 $$\n\nAnd under the minimum Carbons consumption constraint\n$$ 25x_1 + 32x_2 + 12x_3 \\geq 350 $$\n\nMore compactly, we can write it as a minimization problem subject to a system of linear inequalities\n\n\\begin{align*}\nminimize~    & 50x_1 + 30x_2 + 60x_3 & \\\\\\\\\nsubject~ to~ & 4x_1 + 5x_2 + 8x_3 &\\geq 60 \\\\\\\\\n             & 10x_1 + 4x_2 + 7x_3 &\\geq 70 \\\\\\\\\n             & 25x_1 + 32x_2 + 12x_3 &\\geq 350 \\\\\\\\\n             & x_1, x_2, x_3 &\\geq 0 \\\\\\\\\n\\end{align*}\n\nWe have defined a Linear Program (LP) of **3 variables**, **6 constraints** and an **objective function**. The cosntraints $x_1, x_2, x_3 \\geq 0$ are called non-negativity constraints. The set of points $\\\\{ (x_1, x_2, x_3) \\in \\mathbb{R}^3 \\\\}$ that fulfills the constraints is the set of **possible solutions**. The possible solution subset of points that achieve a minimum for the objective function are called **optimal solutions**.\n\n# Definition\n\n> A solid understanding of Linear Algebra is assumed\n\n**Linear Programming Problem (LP)** is an optimization problem where we search a minimum/maximum for a linear objective function subected to constraints that are either linear equalities or linear in-equalities.\n\nA LP is usually represented in **matrix form**. Let \n- $x \\in \\mathbb{R}^n$ be the **variables vector**\n- $c \\in \\mathbb{R}^n$ be the **cost vector**\n- $A \\in \\mathbb{R}^{n \\times m}$ be the **constraints matrix**\n- $b \\in \\mathbb{R}^m$\n\nWe can now write a LP as:\n\n\\begin{align*}\nmin/max~ &\\langle c, x \\rangle \\\\\\\\\ns.t~ & Ax &\\lesseqgtr b \\\\\\\\\n     & x &\\lessgtr 0 \\\\\\\\\n\\end{align*}\n\n> From now on, we will allow ourselves focus on either minimization or maximization problems - Those are completely analogue to each other (simply by negation).\n\n## Common Forms\n\nBecause general form a LP have no coherent structure they makes them hard to work with. As a result, common forms for linear programs has been formulated.\n\n### LP in Standard Form (LPS)\n\nIn LPS, The constraints are all equalities and the variables are all non-negative:\n\n\\begin{align*}\nmin~ &\\langle c, x \\rangle \\\\\\\\\ns.t~ & Ax &= b \\\\\\\\\n     & x &\\geq 0 \\\\\\\\\n\\end{align*}\n\n### LP in Canonized Form (LPC)\n\nIn LPC, The constraints are all *geq* in minimization problems, *leq* in maximization problems  and the variables are all non-negative:\n\n\\begin{align*}\nmin~ &\\langle c, x \\rangle \\\\\\\\\ns.t~ & Ax &\\geq b \\\\\\\\\n     & x &\\geq 0 \\\\\\\\\n\\end{align*}\n\n### Convert between commonn forms\n\nThe above forms are equivalent and can be converted from one to another in **Polynomial Time**.\n\nTo get a LPS from given a general LP\n\n1. *Get rid of variables without non-negativity constraints:* Replace all variables $x_i$ that doesn't have non-negativity constraints with 2 **dummy variables** $x_i^+$ and $x_i^-$. Set $x_i = x_i^+ - x_i^-$ and add the constraints $x_i^+, x_i^- \\geq 0$.\n2. *Replace in-equality constraints with equality constraints:* For every constraint of the form $A^ix \\geq b_i$ add a **dummy variable** $s_i$ and replace the constraint with the constraints $A^ix - s_i = 0$ and $s_i = 0$.\n\nTo get a LPC from a given LPS\n\n1. *Replace equality constraints as in-equality:* Replace every constraint of the for $A^ix = b_i$ with $A^ix \\geq b_i$ and $(-A^i)x \\geq -b_i$.\n\n**For Example**, lets start from the given LP in general form:\n\n\\begin{align*}\nmin~ & x_1 + x_2 + 2x_3 \\\\\\\\\ns.t~ & 3x_1 + 2x_2 + x_3 &= 1 \\\\\\\\\n     & 5x_1 + x_2 - x_3 &\\geq 3  \\\\\\\\\n     & x_1 \\geq 0 \\\\\\\\\n     & x_2 \\leq 0 \\\\\\\\\n\\end{align*}\n\nTo convert it to a LPS we first need to get rid of the variables without non-negativity constraints: $x_2, x_3$. Write $x_2 = x_2^+ - x_2^-$ and $x_3 = x_3^+ - x_3^-$, then add the constraints $x_2^+, x_2^-, x_3^+, x_3^- \\geq 0$.\n\n\\begin{align*}\nmin~ & x_1 + x_2^+ - x_2^- + 2x_3^+ - 2x_3^- \\\\\\\\\ns.t~ & 3x_1 + x_2^+ - x_2^- + x_3^+ - x_3^- &= 1 \\\\\\\\\n     & 5x_1 + x_2^+ - x_2^- - x_3^+ + x_3^- &\\geq 3  \\\\\\\\\n     & x_2^+ - x_2^- &\\leq 0 \\\\\\\\\n     & x_1, x_2^+, x_2^-, x_3^+, x_3^- \\geq 0\n\\end{align*}\n\nNow we need to make all of the constraints to be equalities. Introduce the slack variables $s_2, s_3$ and write the program as:\n\n\\begin{align*}\nmin~ & x_1 + x_2^+ - x_2^- + 2x_3^+ - 2x_3^- \\\\\\\\\ns.t~ & 3x_1 + x_2^+ - x_2^- + x_3^+ - x_3^- &= 1 \\\\\\\\\n     & 5x_1 + x_2^+ - x_2^- - x_3^+ + x_3^- - s_2 &= 3  \\\\\\\\\n     & x_2^+ - x_2^- + s_3 &= 0 \\\\\\\\\n     & x_1, x_2^+, x_2^-, x_3^+, x_3^-, s_2, s_3 \\geq 0\n\\end{align*}\n\nWe got a LPS! Notice though that we multiplied the number of variables.\n\nNow, to get a LPC we need to double each constraint:\n\n\\begin{align*}\nmin~ & x_1 + x_2^+ - x_2^- + 2x_3^+ - 2x_3^- \\\\\\\\\ns.t~ & 3x_1 + x_2^+ - x_2^- + x_3^+ - x_3^- &\\geq 1 \\\\\\\\\n     & -3x_1 - x_2^+ + x_2^- - x_3^+ + x_3^- &\\geq -1 \\\\\\\\\n     & 5x_1 + x_2^+ - x_2^- - x_3^+ + x_3^- - s_2 &\\geq 3  \\\\\\\\\n     & -5x_1 - x_2^+ + x_2^- + x_3^+ - x_3^- + s_2 &\\geq -3  \\\\\\\\\n     & x_2^+ - x_2^- + s_3 &\\geq 0 \\\\\\\\\n     & -x_2^+ + x_2^- - s_3 &\\geq 0 \\\\\\\\\n     & x_1, x_2^+, x_2^-, x_3^+, x_3^-, s_2, s_3 \\geq 0\n\\end{align*}","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h1>Introduction</h1>\n    <p>Before we define what Linear Programming is, let's take a look at an example:</p>\n    <p>Assume we want to make a diet. Our job is to prepare meals would to minimize the amount of calories that we consume while consuming at least $60gr$ of protein, $70gr$ fat and $350gr$ of carbon.</p>\n    <p>Every ingredient contain a certain amount of calories, protein, fat and carbons. For simplicity, let's assume we have 3 ingredients at our disposal:</p>\n    <table>\n      <thead>\n        <tr>\n          <th>Ingredient</th>\n          <th>Calories</th>\n          <th>Protein</th>\n          <th>Fat</th>\n          <th>Carbons</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>1</td>\n          <td>50</td>\n          <td>4</td>\n          <td>10</td>\n          <td>25</td>\n        </tr>\n        <tr>\n          <td>2</td>\n          <td>30</td>\n          <td>5</td>\n          <td>4</td>\n          <td>32</td>\n        </tr>\n        <tr>\n          <td>3</td>\n          <td>60</td>\n          <td>8</td>\n          <td>7</td>\n          <td>12</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>We can compose a meal using the above ingredient however we like. Let $x_1, x_2$ and $x_3$ be the number of units we use for ingredients $1,2$ and $3$ accordingly.</p>\n    <p>\n      Our objective is to minimize the expression\n      $$ 50x_1 + 30x_2 + 60x_2 $$\n    </p>\n    <p>\n      Under the constraint that we cannot pick a negative number of ingredients\n      $$ x_1, x_2, x_3 \\geq 0 $$\n    </p>\n    <p>\n      And under the minimum Protein consumption constraint\n      $$ 4x_1 + 5x_2 + 8x_3 \\geq 60 $$\n    </p>\n    <p>\n      And under the minimum Fat consumption constraint\n      $$ 10x_1 + 4x_2 + 7x_3 \\geq 70 $$\n    </p>\n    <p>\n      And under the minimum Carbons consumption constraint\n      $$ 25x_1 + 32x_2 + 12x_3 \\geq 350 $$\n    </p>\n    <p>More compactly, we can write it as a minimization problem subject to a system of linear inequalities</p>\n    <p>\n      \\begin{align*}\n      minimize~ &#x26; 50x_1 + 30x_2 + 60x_3 &#x26; \\\\\n      subject~ to~ &#x26; 4x_1 + 5x_2 + 8x_3 &#x26;\\geq 60 \\\\\n      &#x26; 10x_1 + 4x_2 + 7x_3 &#x26;\\geq 70 \\\\\n      &#x26; 25x_1 + 32x_2 + 12x_3 &#x26;\\geq 350 \\\\\n      &#x26; x_1, x_2, x_3 &#x26;\\geq 0 \\\\\n      \\end{align*}\n    </p>\n    <p>We have defined a Linear Program (LP) of <strong>3 variables</strong>, <strong>6 constraints</strong> and an <strong>objective function</strong>. The cosntraints $x_1, x_2, x_3 \\geq 0$ are called non-negativity constraints. The set of points $\\{ (x_1, x_2, x_3) \\in \\mathbb{R}^3 \\}$ that fulfills the constraints is the set of <strong>possible solutions</strong>. The possible solution subset of points that achieve a minimum for the objective function are called <strong>optimal solutions</strong>.</p>\n    <h1>Definition</h1>\n    <blockquote>\n      <p>A solid understanding of Linear Algebra is assumed</p>\n    </blockquote>\n    <p><strong>Linear Programming Problem (LP)</strong> is an optimization problem where we search a minimum/maximum for a linear objective function subected to constraints that are either linear equalities or linear in-equalities.</p>\n    <p>A LP is usually represented in <strong>matrix form</strong>. Let</p>\n    <ul>\n      <li>$x \\in \\mathbb{R}^n$ be the <strong>variables vector</strong></li>\n      <li>$c \\in \\mathbb{R}^n$ be the <strong>cost vector</strong></li>\n      <li>$A \\in \\mathbb{R}^{n \\times m}$ be the <strong>constraints matrix</strong></li>\n      <li>$b \\in \\mathbb{R}^m$</li>\n    </ul>\n    <p>We can now write a LP as:</p>\n    <p>\n      \\begin{align*}\n      min/max~ &#x26;\\langle c, x \\rangle \\\\\n      s.t~ &#x26; Ax &#x26;\\lesseqgtr b \\\\\n      &#x26; x &#x26;\\lessgtr 0 \\\\\n      \\end{align*}\n    </p>\n    <blockquote>\n      <p>From now on, we will allow ourselves focus on either minimization or maximization problems - Those are completely analogue to each other (simply by negation).</p>\n    </blockquote>\n    <h2>Common Forms</h2>\n    <p>Because general form a LP have no coherent structure they makes them hard to work with. As a result, common forms for linear programs has been formulated.</p>\n    <h3>LP in Standard Form (LPS)</h3>\n    <p>In LPS, The constraints are all equalities and the variables are all non-negative:</p>\n    <p>\n      \\begin{align*}\n      min~ &#x26;\\langle c, x \\rangle \\\\\n      s.t~ &#x26; Ax &#x26;= b \\\\\n      &#x26; x &#x26;\\geq 0 \\\\\n      \\end{align*}\n    </p>\n    <h3>LP in Canonized Form (LPC)</h3>\n    <p>In LPC, The constraints are all <em>geq</em> in minimization problems, <em>leq</em> in maximization problems and the variables are all non-negative:</p>\n    <p>\n      \\begin{align*}\n      min~ &#x26;\\langle c, x \\rangle \\\\\n      s.t~ &#x26; Ax &#x26;\\geq b \\\\\n      &#x26; x &#x26;\\geq 0 \\\\\n      \\end{align*}\n    </p>\n    <h3>Convert between commonn forms</h3>\n    <p>The above forms are equivalent and can be converted from one to another in <strong>Polynomial Time</strong>.</p>\n    <p>To get a LPS from given a general LP</p>\n    <ol>\n      <li><em>Get rid of variables without non-negativity constraints:</em> Replace all variables $x_i$ that doesn't have non-negativity constraints with 2 <strong>dummy variables</strong> $x_i^+$ and $x_i^-$. Set $x_i = x_i^+ - x_i^-$ and add the constraints $x_i^+, x_i^- \\geq 0$.</li>\n      <li><em>Replace in-equality constraints with equality constraints:</em> For every constraint of the form $A^ix \\geq b_i$ add a <strong>dummy variable</strong> $s_i$ and replace the constraint with the constraints $A^ix - s_i = 0$ and $s_i = 0$.</li>\n    </ol>\n    <p>To get a LPC from a given LPS</p>\n    <ol>\n      <li><em>Replace equality constraints as in-equality:</em> Replace every constraint of the for $A^ix = b_i$ with $A^ix \\geq b_i$ and $(-A^i)x \\geq -b_i$.</li>\n    </ol>\n    <p><strong>For Example</strong>, lets start from the given LP in general form:</p>\n    <p>\n      \\begin{align*}\n      min~ &#x26; x_1 + x_2 + 2x_3 \\\\\n      s.t~ &#x26; 3x_1 + 2x_2 + x_3 &#x26;= 1 \\\\\n      &#x26; 5x_1 + x_2 - x_3 &#x26;\\geq 3 \\\\\n      &#x26; x_1 \\geq 0 \\\\\n      &#x26; x_2 \\leq 0 \\\\\n      \\end{align*}\n    </p>\n    <p>To convert it to a LPS we first need to get rid of the variables without non-negativity constraints: $x_2, x_3$. Write $x_2 = x_2^+ - x_2^-$ and $x_3 = x_3^+ - x_3^-$, then add the constraints $x_2^+, x_2^-, x_3^+, x_3^- \\geq 0$.</p>\n    <p>\n      \\begin{align*}\n      min~ &#x26; x_1 + x_2^+ - x_2^- + 2x_3^+ - 2x_3^- \\\\\n      s.t~ &#x26; 3x_1 + x_2^+ - x_2^- + x_3^+ - x_3^- &#x26;= 1 \\\\\n      &#x26; 5x_1 + x_2^+ - x_2^- - x_3^+ + x_3^- &#x26;\\geq 3 \\\\\n      &#x26; x_2^+ - x_2^- &#x26;\\leq 0 \\\\\n      &#x26; x_1, x_2^+, x_2^-, x_3^+, x_3^- \\geq 0\n      \\end{align*}\n    </p>\n    <p>Now we need to make all of the constraints to be equalities. Introduce the slack variables $s_2, s_3$ and write the program as:</p>\n    <p>\n      \\begin{align*}\n      min~ &#x26; x_1 + x_2^+ - x_2^- + 2x_3^+ - 2x_3^- \\\\\n      s.t~ &#x26; 3x_1 + x_2^+ - x_2^- + x_3^+ - x_3^- &#x26;= 1 \\\\\n      &#x26; 5x_1 + x_2^+ - x_2^- - x_3^+ + x_3^- - s_2 &#x26;= 3 \\\\\n      &#x26; x_2^+ - x_2^- + s_3 &#x26;= 0 \\\\\n      &#x26; x_1, x_2^+, x_2^-, x_3^+, x_3^-, s_2, s_3 \\geq 0\n      \\end{align*}\n    </p>\n    <p>We got a LPS! Notice though that we multiplied the number of variables.</p>\n    <p>Now, to get a LPC we need to double each constraint:</p>\n    <p>\n      \\begin{align*}\n      min~ &#x26; x_1 + x_2^+ - x_2^- + 2x_3^+ - 2x_3^- \\\\\n      s.t~ &#x26; 3x_1 + x_2^+ - x_2^- + x_3^+ - x_3^- &#x26;\\geq 1 \\\\\n      &#x26; -3x_1 - x_2^+ + x_2^- - x_3^+ + x_3^- &#x26;\\geq -1 \\\\\n      &#x26; 5x_1 + x_2^+ - x_2^- - x_3^+ + x_3^- - s_2 &#x26;\\geq 3 \\\\\n      &#x26; -5x_1 - x_2^+ + x_2^- + x_3^+ - x_3^- + s_2 &#x26;\\geq -3 \\\\\n      &#x26; x_2^+ - x_2^- + s_3 &#x26;\\geq 0 \\\\\n      &#x26; -x_2^+ + x_2^- - s_3 &#x26;\\geq 0 \\\\\n      &#x26; x_1, x_2^+, x_2^-, x_3^+, x_3^-, s_2, s_3 \\geq 0\n      \\end{align*}\n    </p>\n  </body>\n</html>\n"}}},"__N_SSG":true}