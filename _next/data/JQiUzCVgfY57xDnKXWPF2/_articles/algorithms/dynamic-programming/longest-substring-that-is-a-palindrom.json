{"pageProps":{"article":{"id":"algorithms/dynamic-programming/longest-substring-that-is-a-palindrom","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/next-legacy/content/algorithms/dynamic-programming/longest-substring-that-is-a-palindrom.md","metadata":{"title":"Longest substring that is a Palindrom","description":null,"priority":0,"tags":["Dynamic Programming","Palindrom"],"categories":["Algorithms"],"toc":true},"content":{"raw":"\n# Overview\n\nA string $S$ is a palindrom iff $S = reverse(S)$\n\n**The Problem**\n\nGiven a string S, find the longest *substring* of S that is also a palindrom\n\n> Remember that substrings are consequtive\n\n**To illustrate**\n\n- a**bcb**ea $\\rightarrow$ bcb (not abcba)\n- **abbcbba**dad $\\rightarrow$ abbcbba\n\n# Solution\n\nWe shall define $opt(i, j)$ to indicate the length of the longest palindrom substring between the i'th character to the j'th character by the recurrence relation\n\nfor all i, opt(i, i) = true since a single character is a palindrom of itself.\n\nfor all i and $j > i$, opt(i, j) true if S[i] = S[j] and also opt(i + 1, j - 1) = true.\n\nFinally, to figure out the length of the longest substring that is a palindrom we need to find i and j that maximizes $j - i$ and such that opt(i, j) = true.\n\n**Psuedo**\n\n- Initialize opt\n  - $opt \\leftarrow matrix(n, n)$\n    - initialize all values false by default\n    - $\\forall i$\n      - $opt(i, i) = true$\n      - $opt(i, i + 1) \\leftarrow S[i]=S[i+1]$\n\n- Build opt in a bottom up fashion\n  - $for ~ l = 2, 3, ... n - 1$\n    - $for ~ i = 1, ..., n - l$\n      - $j \\leftarrow i +  - 1$\n      - $opt(i, j) \\leftarrow S[i] = S[j] \\land opt(i + 1, j - 1)$\n- Find the length of the longest substring that is a palindrom\n  - $for~ l = n-1, n-2, ..., 1$\n    - $for~ i = 1, 2, ..., n - l$\n      - $if~ opt(i, i + l)$\n        - return l\n\n**Time Complexity**\n\n- Initialization of opt is $O(n^2)$\n- Building opt takes $O(n^2)$ iterations\n  - Each iteration takes $O(1)$ accesses to opt\n\nSo in total, the time complexity is $O(n^2)$","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <nav class=\"toc\">\n      <ol class=\"toc-level toc-level-1\">\n        <li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#overview\">Overview</a></li>\n        <li class=\"toc-item toc-item-h1\"><a class=\"toc-link toc-link-h1\" href=\"#solution\">Solution</a></li>\n      </ol>\n    </nav>\n    <h1 id=\"overview\">Overview</h1>\n    <p>A string $S$ is a palindrom iff $S = reverse(S)$</p>\n    <p><strong>The Problem</strong></p>\n    <p>Given a string S, find the longest <em>substring</em> of S that is also a palindrom</p>\n    <blockquote>\n      <p>Remember that substrings are consequtive</p>\n    </blockquote>\n    <p><strong>To illustrate</strong></p>\n    <ul>\n      <li>a<strong>bcb</strong>ea $\\rightarrow$ bcb (not abcba)</li>\n      <li><strong>abbcbba</strong>dad $\\rightarrow$ abbcbba</li>\n    </ul>\n    <h1 id=\"solution\">Solution</h1>\n    <p>We shall define $opt(i, j)$ to indicate the length of the longest palindrom substring between the i'th character to the j'th character by the recurrence relation</p>\n    <p>for all i, opt(i, i) = true since a single character is a palindrom of itself.</p>\n    <p>for all i and $j > i$, opt(i, j) true if S[i] = S[j] and also opt(i + 1, j - 1) = true.</p>\n    <p>Finally, to figure out the length of the longest substring that is a palindrom we need to find i and j that maximizes $j - i$ and such that opt(i, j) = true.</p>\n    <p><strong>Psuedo</strong></p>\n    <ul>\n      <li>\n        <p>Initialize opt</p>\n        <ul>\n          <li>$opt \\leftarrow matrix(n, n)$\n            <ul>\n              <li>initialize all values false by default</li>\n              <li>$\\forall i$\n                <ul>\n                  <li>$opt(i, i) = true$</li>\n                  <li>$opt(i, i + 1) \\leftarrow S[i]=S[i+1]$</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>\n        <p>Build opt in a bottom up fashion</p>\n        <ul>\n          <li>$for ~ l = 2, 3, ... n - 1$\n            <ul>\n              <li>$for ~ i = 1, ..., n - l$\n                <ul>\n                  <li>$j \\leftarrow i + - 1$</li>\n                  <li>$opt(i, j) \\leftarrow S[i] = S[j] \\land opt(i + 1, j - 1)$</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>\n        <p>Find the length of the longest substring that is a palindrom</p>\n        <ul>\n          <li>$for~ l = n-1, n-2, ..., 1$\n            <ul>\n              <li>$for~ i = 1, 2, ..., n - l$\n                <ul>\n                  <li>$if~ opt(i, i + l)$\n                    <ul>\n                      <li>return l</li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <p><strong>Time Complexity</strong></p>\n    <ul>\n      <li>Initialization of opt is $O(n^2)$</li>\n      <li>Building opt takes $O(n^2)$ iterations\n        <ul>\n          <li>Each iteration takes $O(1)$ accesses to opt</li>\n        </ul>\n      </li>\n    </ul>\n    <p>So in total, the time complexity is $O(n^2)$</p>\n  </body>\n</html>\n"}}},"__N_SSG":true}