{"pageProps":{"article":{"id":"elastic/overview","filePath":"/home/runner/work/tglanz.github.io/tglanz.github.io/content/elastic/overview.md","metadata":{"title":"Elasticsearch Notes","description":null,"priority":0,"tags":["Elasticsearch"],"categories":["Elasticsearch","Notes"],"toc":true},"content":{"raw":"\nConcepts and examples to get reminded of once in a whilei\n\n## What is Elasticsearch \n\n_Elasticsearch_ is a distributed search and analytics engine, providing a _near real-time_ search for a large array of data types, structured or un-structured.\n\nSome of the usecases\n- Backend for search boxes\n- Metrics and Log analysis\n\nElasticsearch uses _Apache Lucene_ under the hood as it's underlying search engine.\n\n## Documents & Indices\n\nTechnically, and I quote - \"Elasticsearch is a distributed documented store\". It serializes any kind of structure into JSON documents. In an Elasticsearch cluster, the documents are distributed accross multiple nodes and are accessible from any (really?) of the nodes.\n\n__TODO__ Are the documents distributed accross all nodes, or a part of the cluster? It actually seems unreasonable to me that it is a full replication.\n\nElasticsearch maintains an _Inverted Index_ to provide fast search capabilities on all of a document's fields (They say that a document is fully searchable within 1 sec). Practically, the index is the data structure the collects multiple documents and provides fast access to them according to search criteria.\n\nWe can think of the model as such\n```\nField\n    key: String\n    value: Any\n\nDocument\n    fields: Field[]\n\nIndex\n    documents: Document[]\n```\n\nBy default, Elasticsearch index all fields in all documents, and it has different mehcanisms to index different data types.\n\n## Search & Aggregations\n\nElasticsearch provides a REST API that supports\n- Structured queries -  Queries that are structurely similiar to SQL queries\n- Full text queries - Queries that return all documents that match the query, sorted by relevance\n- Complex queries - A combination of the above\n\nElasticsearch can maintain aggregations of the data enabling us to analyze summaries providing insights regarding metrics, patterns and trends. For example, we can query for\n- Total numbers that match X\n- The average that match Y\n\nFurthermore, aggregations can operate alongside the search requests, meaning that we can gain aggregative information for all search results.\n\n### cat API\n\nThe ```_cat``` endpoint provides \"Compact and Aligned Text\" meaning, a general, __consumed by humans__ information.\n\nGet the list of cat APIs\n\n    /_cat\n\nGet information about indices using [cat indices API](https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-indices.html)\n\n    /_cat/indices\n    /_cat/indices/_all\n    /_cat/indices?format=json\n    /_cat/indices/my-index\n    /_cat/indices/my-index?format=json\n\n### search API\n\nThe ```<target>/_search``` endpoint provides searching functionality.\n\nThe ```<target>``` parameter is optional and is a comma seperated list indicating data streams, indices and aliases to search. It supports wildcards (*).\n\nThere are many query parameters that affects how the search is being performed and how the results are being returned. We won't list them all here but here is a small list that give a vibe on the kind of possible parameters\n\n- q(string) - The query. Note that it can alternetively be provided through the body\n- explain(boolean) - If true, returns a defailed information about the score computation  \n- timeout(time units) - Sets the timeout for the request  \n- from(integer) - Starting document offset  \n- size(integer) - Number of hits to return  \n\nThe body also contains important information the important one is the \"query\" field.\n\n### shards\n\nShow shards\n\n    /_cat/shards\n    /_cat/shards?h=index,shard\n\n### Usage\n\n#### Basics, insert and retrieve documents\n\nAssume the scenario with indices ```tglanzma-small-1,2,3``` and a document model\n\n```\n{\n    _id: string\n    x: string\n    y: string\n    z: number\n    tags: string[]\n}\n```\n\nTo add documents to and index we use the [Index API](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html). For example\n\n```\nPUT tglanzma-small-1/_doc/1\n{\n  \"x\": \"x of 1\",\n  \"y\": \"y of 1\",\n  \"z\": 1,\n  \"tags\": [\n    \"first tag of 1\",\n    \"second tag of 1\"\n  ]\n}\n```\n\nTo get a specific document by it's id we use the [Document's Get API](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html). For example\n\n```\nGET tglanzma-small-1/_doc/1\n```\n\nTo get multiple documents by their ids, use the [Multi get API](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html). For example\n\n```\nGET _mget\n{\n  \"docs\": [{\n    \"_index\": \"tglanzma-small-1\",\n    \"_id\": 1\n  }, {\n    \"_index\": \"tglanzma-small-1\",\n    \"_id\": 2\n  }]\n}\n```\n\n### Searching an index\n\nTo search for documents we use the [Search API](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html).\n\nTo search for all documents within a specific index\n\n```\nGET tglanzma-small-1/_search\n```\n\nTo specify exactly what fields we want returned from each document we will use the ```_source``` parameter, as so\n\n```\nGET tglanzma-small-1/_search\n{\n  \"_source\": [\n    \"x\",\n    \"y\"\n  ]\n}\n```\n\nTo specify the search query we use the ```query``` parameter. This is a query object and we specify it using the [Query DSL](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html).\n\nThe Query DSL is an AST defined as\n\n```\nQuery := Leaf | Compound\nCompound := [Compound | Leaf]\n```\n\n\nSearch documents where ```x === x of 1``` we use the [Match phrase query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html)\n\n```\nGET tglanzma-small-1/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match_phrase\": {\n            \"x\": \"x of 1\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nFor a fuzzy search, we use the [Match query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html).\n\n```\nGET tglanzma-small-1/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"x\": \"x of 1\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nThe returned documents might not have an exact match because we fuzzy searched. Each document is assigned with a score determining how close it is to a full match. We can control the minimum we want using the ```min_score``` parameter\n\n```\nGET tglanzma-small-1/_search\n{\n  \"min_score\": 0.6,\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"x\": \"x of 1\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nThe [Boolean query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html) matches boolean combinations over documents.\n\nThe ```must``` acts as an AND operator and the ```should``` acts as an OR operator. Intuitively, the ```must_not``` acts as negation.\n\nTo search for query that have either ```x = x of 1``` and ```y = y of 1``` we use the ```must``` query\n\n```\nGET tglanzma-small-1/_search\n{\n  \"min_score\": 0.6,\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match_phrase\": {\n            \"x\": \"x of 1\"\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"y\": \"y of 1\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nTo search for query that have either ```x = x of 1``` or ```y = y of 2``` we use the ```should``` query\n\n```\nGET tglanzma-small-1/_search\n{\n  \"min_score\": 0.6,\n  \"query\": {\n    \"bool\": {\n      \"should\": [\n        {\n          \"match_phrase\": {\n            \"x\": \"x of 1\"\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"y\": \"y of 2\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nAs mentioned, compound queries are recursively defined so we can compose combinations. For example, to match documents where (```x = x of 1``` AND ```y = y of 1```) OR (```x = x of 2``` AND ```y = y of 2```)\n\n```\nGET tglanzma-small-1/_search\n{\n  \"min_score\": 0.6,\n  \"query\": {\n    \"bool\": {\n      \"should\": [\n        {\n          \"bool\": {\n            \"must\": [\n              {\n                \"match_phrase\": {\n                  \"x\": \"x of 1\"\n                }\n              },\n              {\n                \"match_phrase\": {\n                  \"y\": \"y of 1\"\n                }\n              }\n            ]\n          }\n        },\n        {\n          \"bool\": {\n            \"must\": [\n              {\n                \"match_phrase\": {\n                  \"x\": \"x of 2\"\n                }\n              },\n              {\n                \"match_phrase\": {\n                  \"y\": \"y of 2\"\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n```\n","html":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <nav class=\"toc\">\n      <ol class=\"toc-level toc-level-1\">\n        <li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#what-is-elasticsearch\">What is Elasticsearch</a></li>\n        <li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#documents--indices\">Documents &#x26; Indices</a></li>\n        <li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#search--aggregations\">Search &#x26; Aggregations</a></li>\n      </ol>\n    </nav>\n    <p>Concepts and examples to get reminded of once in a whilei</p>\n    <h2 id=\"what-is-elasticsearch\">What is Elasticsearch</h2>\n    <p><em>Elasticsearch</em> is a distributed search and analytics engine, providing a <em>near real-time</em> search for a large array of data types, structured or un-structured.</p>\n    <p>Some of the usecases</p>\n    <ul>\n      <li>Backend for search boxes</li>\n      <li>Metrics and Log analysis</li>\n    </ul>\n    <p>Elasticsearch uses <em>Apache Lucene</em> under the hood as it's underlying search engine.</p>\n    <h2 id=\"documents--indices\">Documents &#x26; Indices</h2>\n    <p>Technically, and I quote - \"Elasticsearch is a distributed documented store\". It serializes any kind of structure into JSON documents. In an Elasticsearch cluster, the documents are distributed accross multiple nodes and are accessible from any (really?) of the nodes.</p>\n    <p><strong>TODO</strong> Are the documents distributed accross all nodes, or a part of the cluster? It actually seems unreasonable to me that it is a full replication.</p>\n    <p>Elasticsearch maintains an <em>Inverted Index</em> to provide fast search capabilities on all of a document's fields (They say that a document is fully searchable within 1 sec). Practically, the index is the data structure the collects multiple documents and provides fast access to them according to search criteria.</p>\n    <p>We can think of the model as such</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">Field</span>\n    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">String</span>\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">Any</span>\n\n<span class=\"hljs-attr\">Document</span>\n    <span class=\"hljs-attr\">fields</span>: <span class=\"hljs-string\">Field[]</span>\n\n<span class=\"hljs-attr\">Index</span>\n    <span class=\"hljs-attr\">documents</span>: <span class=\"hljs-string\">Document[]</span>\n</code></pre>\n    <p>By default, Elasticsearch index all fields in all documents, and it has different mehcanisms to index different data types.</p>\n    <h2 id=\"search--aggregations\">Search &#x26; Aggregations</h2>\n    <p>Elasticsearch provides a REST API that supports</p>\n    <ul>\n      <li>Structured queries - Queries that are structurely similiar to SQL queries</li>\n      <li>Full text queries - Queries that return all documents that match the query, sorted by relevance</li>\n      <li>Complex queries - A combination of the above</li>\n    </ul>\n    <p>Elasticsearch can maintain aggregations of the data enabling us to analyze summaries providing insights regarding metrics, patterns and trends. For example, we can query for</p>\n    <ul>\n      <li>Total numbers that match X</li>\n      <li>The average that match Y</li>\n    </ul>\n    <p>Furthermore, aggregations can operate alongside the search requests, meaning that we can gain aggregative information for all search results.</p>\n    <h3 id=\"cat-api\">cat API</h3>\n    <p>The <code>_cat</code> endpoint provides \"Compact and Aligned Text\" meaning, a general, <strong>consumed by humans</strong> information.</p>\n    <p>Get the list of cat APIs</p>\n    <pre><code class=\"hljs language-bash\">/_cat\n</code></pre>\n    <p>Get information about indices using <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-indices.html\">cat indices API</a></p>\n    <pre><code class=\"hljs language-awk\"><span class=\"hljs-regexp\">/_cat/i</span>ndices\n<span class=\"hljs-regexp\">/_cat/i</span>ndices/_all\n<span class=\"hljs-regexp\">/_cat/i</span>ndices?format=json\n<span class=\"hljs-regexp\">/_cat/i</span>ndices/my-index\n<span class=\"hljs-regexp\">/_cat/i</span>ndices/my-index?format=json\n</code></pre>\n    <h3 id=\"search-api\">search API</h3>\n    <p>The <code>&#x3C;target>/_search</code> endpoint provides searching functionality.</p>\n    <p>The <code>&#x3C;target></code> parameter is optional and is a comma seperated list indicating data streams, indices and aliases to search. It supports wildcards (*).</p>\n    <p>There are many query parameters that affects how the search is being performed and how the results are being returned. We won't list them all here but here is a small list that give a vibe on the kind of possible parameters</p>\n    <ul>\n      <li>q(string) - The query. Note that it can alternetively be provided through the body</li>\n      <li>explain(boolean) - If true, returns a defailed information about the score computation</li>\n      <li>timeout(time units) - Sets the timeout for the request</li>\n      <li>from(integer) - Starting document offset</li>\n      <li>size(integer) - Number of hits to return</li>\n    </ul>\n    <p>The body also contains important information the important one is the \"query\" field.</p>\n    <h3 id=\"shards\">shards</h3>\n    <p>Show shards</p>\n    <pre><code class=\"hljs language-awk\"><span class=\"hljs-regexp\">/_cat/</span>shards\n<span class=\"hljs-regexp\">/_cat/</span>shards?h=index,shard\n</code></pre>\n    <h3 id=\"usage\">Usage</h3>\n    <h4 id=\"basics-insert-and-retrieve-documents\">Basics, insert and retrieve documents</h4>\n    <p>Assume the scenario with indices <code>tglanzma-small-1,2,3</code> and a document model</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">{</span>\n    <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-string\">string</span>\n    <span class=\"hljs-attr\">x</span>: <span class=\"hljs-string\">string</span>\n    <span class=\"hljs-attr\">y</span>: <span class=\"hljs-string\">string</span>\n    <span class=\"hljs-attr\">z</span>: <span class=\"hljs-string\">number</span>\n    <span class=\"hljs-attr\">tags</span>: <span class=\"hljs-string\">string[]</span>\n<span class=\"hljs-attr\">}</span>\n</code></pre>\n    <p>To add documents to and index we use the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html\">Index API</a>. For example</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">PUT</span> <span class=\"hljs-string\">tglanzma-small-1/_doc/1</span>\n<span class=\"hljs-attr\">{</span>\n  <span class=\"hljs-attr\">\"x\"</span>: <span class=\"hljs-string\">\"x of 1\",</span>\n  <span class=\"hljs-attr\">\"y\"</span>: <span class=\"hljs-string\">\"y of 1\",</span>\n  <span class=\"hljs-attr\">\"z\"</span>: <span class=\"hljs-string\">1,</span>\n  <span class=\"hljs-attr\">\"tags\"</span>: <span class=\"hljs-string\">[</span>\n    <span class=\"hljs-attr\">\"first</span> <span class=\"hljs-string\">tag of 1\",</span>\n    <span class=\"hljs-attr\">\"second</span> <span class=\"hljs-string\">tag of 1\"</span>\n  <span class=\"hljs-attr\">]</span>\n<span class=\"hljs-attr\">}</span>\n</code></pre>\n    <p>To get a specific document by it's id we use the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html\">Document's Get API</a>. For example</p>\n    <pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">GET</span> tglanzma-small-<span class=\"hljs-number\">1</span>/_doc/<span class=\"hljs-number\">1</span>\n</code></pre>\n    <p>To get multiple documents by their ids, use the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html\">Multi get API</a>. For example</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">GET</span> <span class=\"hljs-string\">_mget</span>\n<span class=\"hljs-attr\">{</span>\n  <span class=\"hljs-attr\">\"docs\"</span>: <span class=\"hljs-string\">[{</span>\n    <span class=\"hljs-attr\">\"_index\"</span>: <span class=\"hljs-string\">\"tglanzma-small-1\",</span>\n    <span class=\"hljs-attr\">\"_id\"</span>: <span class=\"hljs-string\">1</span>\n  <span class=\"hljs-attr\">},</span> <span class=\"hljs-string\">{</span>\n    <span class=\"hljs-attr\">\"_index\"</span>: <span class=\"hljs-string\">\"tglanzma-small-1\",</span>\n    <span class=\"hljs-attr\">\"_id\"</span>: <span class=\"hljs-string\">2</span>\n  <span class=\"hljs-attr\">}]</span>\n<span class=\"hljs-attr\">}</span>\n</code></pre>\n    <h3 id=\"searching-an-index\">Searching an index</h3>\n    <p>To search for documents we use the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html\">Search API</a>.</p>\n    <p>To search for all documents within a specific index</p>\n    <pre><code class=\"hljs language-excel\">GET tglanzma-<span class=\"hljs-built_in\">small</span>-<span class=\"hljs-number\">1</span>/_<span class=\"hljs-built_in\">search</span>\n</code></pre>\n    <p>To specify exactly what fields we want returned from each document we will use the <code>_source</code> parameter, as so</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">GET</span> <span class=\"hljs-string\">tglanzma-small-1/_search</span>\n<span class=\"hljs-attr\">{</span>\n  <span class=\"hljs-attr\">\"_source\"</span>: <span class=\"hljs-string\">[</span>\n    <span class=\"hljs-attr\">\"x\",</span>\n    <span class=\"hljs-attr\">\"y\"</span>\n  <span class=\"hljs-attr\">]</span>\n<span class=\"hljs-attr\">}</span>\n</code></pre>\n    <p>To specify the search query we use the <code>query</code> parameter. This is a query object and we specify it using the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\">Query DSL</a>.</p>\n    <p>The Query DSL is an AST defined as</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">Query</span> :<span class=\"hljs-string\">= Leaf | Compound</span>\n<span class=\"hljs-attr\">Compound</span> :<span class=\"hljs-string\">= [Compound | Leaf]</span>\n</code></pre>\n    <p>Search documents where <code>x === x of 1</code> we use the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html\">Match phrase query</a></p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">GET</span> <span class=\"hljs-string\">tglanzma-small-1/_search</span>\n<span class=\"hljs-attr\">{</span>\n  <span class=\"hljs-attr\">\"query\"</span>: <span class=\"hljs-string\">{</span>\n    <span class=\"hljs-attr\">\"bool\"</span>: <span class=\"hljs-string\">{</span>\n      <span class=\"hljs-attr\">\"must\"</span>: <span class=\"hljs-string\">[</span>\n        <span class=\"hljs-attr\">{</span>\n          <span class=\"hljs-attr\">\"match_phrase\"</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">\"x\"</span>: <span class=\"hljs-string\">\"x of 1\"</span>\n          <span class=\"hljs-attr\">}</span>\n        <span class=\"hljs-attr\">}</span>\n      <span class=\"hljs-attr\">]</span>\n    <span class=\"hljs-attr\">}</span>\n  <span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">}</span>\n</code></pre>\n    <p>For a fuzzy search, we use the <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html\">Match query</a>.</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">GET</span> <span class=\"hljs-string\">tglanzma-small-1/_search</span>\n<span class=\"hljs-attr\">{</span>\n  <span class=\"hljs-attr\">\"query\"</span>: <span class=\"hljs-string\">{</span>\n    <span class=\"hljs-attr\">\"bool\"</span>: <span class=\"hljs-string\">{</span>\n      <span class=\"hljs-attr\">\"must\"</span>: <span class=\"hljs-string\">[</span>\n        <span class=\"hljs-attr\">{</span>\n          <span class=\"hljs-attr\">\"match\"</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">\"x\"</span>: <span class=\"hljs-string\">\"x of 1\"</span>\n          <span class=\"hljs-attr\">}</span>\n        <span class=\"hljs-attr\">}</span>\n      <span class=\"hljs-attr\">]</span>\n    <span class=\"hljs-attr\">}</span>\n  <span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">}</span>\n</code></pre>\n    <p>The returned documents might not have an exact match because we fuzzy searched. Each document is assigned with a score determining how close it is to a full match. We can control the minimum we want using the <code>min_score</code> parameter</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">GET</span> <span class=\"hljs-string\">tglanzma-small-1/_search</span>\n<span class=\"hljs-attr\">{</span>\n  <span class=\"hljs-attr\">\"min_score\"</span>: <span class=\"hljs-string\">0.6,</span>\n  <span class=\"hljs-attr\">\"query\"</span>: <span class=\"hljs-string\">{</span>\n    <span class=\"hljs-attr\">\"bool\"</span>: <span class=\"hljs-string\">{</span>\n      <span class=\"hljs-attr\">\"must\"</span>: <span class=\"hljs-string\">[</span>\n        <span class=\"hljs-attr\">{</span>\n          <span class=\"hljs-attr\">\"match\"</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">\"x\"</span>: <span class=\"hljs-string\">\"x of 1\"</span>\n          <span class=\"hljs-attr\">}</span>\n        <span class=\"hljs-attr\">}</span>\n      <span class=\"hljs-attr\">]</span>\n    <span class=\"hljs-attr\">}</span>\n  <span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">}</span>\n</code></pre>\n    <p>The <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html\">Boolean query</a> matches boolean combinations over documents.</p>\n    <p>The <code>must</code> acts as an AND operator and the <code>should</code> acts as an OR operator. Intuitively, the <code>must_not</code> acts as negation.</p>\n    <p>To search for query that have either <code>x = x of 1</code> and <code>y = y of 1</code> we use the <code>must</code> query</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">GET</span> <span class=\"hljs-string\">tglanzma-small-1/_search</span>\n<span class=\"hljs-attr\">{</span>\n  <span class=\"hljs-attr\">\"min_score\"</span>: <span class=\"hljs-string\">0.6,</span>\n  <span class=\"hljs-attr\">\"query\"</span>: <span class=\"hljs-string\">{</span>\n    <span class=\"hljs-attr\">\"bool\"</span>: <span class=\"hljs-string\">{</span>\n      <span class=\"hljs-attr\">\"must\"</span>: <span class=\"hljs-string\">[</span>\n        <span class=\"hljs-attr\">{</span>\n          <span class=\"hljs-attr\">\"match_phrase\"</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">\"x\"</span>: <span class=\"hljs-string\">\"x of 1\"</span>\n          <span class=\"hljs-attr\">}</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">{</span>\n          <span class=\"hljs-attr\">\"match_phrase\"</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">\"y\"</span>: <span class=\"hljs-string\">\"y of 1\"</span>\n          <span class=\"hljs-attr\">}</span>\n        <span class=\"hljs-attr\">}</span>\n      <span class=\"hljs-attr\">]</span>\n    <span class=\"hljs-attr\">}</span>\n  <span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">}</span>\n</code></pre>\n    <p>To search for query that have either <code>x = x of 1</code> or <code>y = y of 2</code> we use the <code>should</code> query</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">GET</span> <span class=\"hljs-string\">tglanzma-small-1/_search</span>\n<span class=\"hljs-attr\">{</span>\n  <span class=\"hljs-attr\">\"min_score\"</span>: <span class=\"hljs-string\">0.6,</span>\n  <span class=\"hljs-attr\">\"query\"</span>: <span class=\"hljs-string\">{</span>\n    <span class=\"hljs-attr\">\"bool\"</span>: <span class=\"hljs-string\">{</span>\n      <span class=\"hljs-attr\">\"should\"</span>: <span class=\"hljs-string\">[</span>\n        <span class=\"hljs-attr\">{</span>\n          <span class=\"hljs-attr\">\"match_phrase\"</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">\"x\"</span>: <span class=\"hljs-string\">\"x of 1\"</span>\n          <span class=\"hljs-attr\">}</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">{</span>\n          <span class=\"hljs-attr\">\"match_phrase\"</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">\"y\"</span>: <span class=\"hljs-string\">\"y of 2\"</span>\n          <span class=\"hljs-attr\">}</span>\n        <span class=\"hljs-attr\">}</span>\n      <span class=\"hljs-attr\">]</span>\n    <span class=\"hljs-attr\">}</span>\n  <span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">}</span>\n</code></pre>\n    <p>As mentioned, compound queries are recursively defined so we can compose combinations. For example, to match documents where (<code>x = x of 1</code> AND <code>y = y of 1</code>) OR (<code>x = x of 2</code> AND <code>y = y of 2</code>)</p>\n    <pre><code class=\"hljs language-properties\"><span class=\"hljs-attr\">GET</span> <span class=\"hljs-string\">tglanzma-small-1/_search</span>\n<span class=\"hljs-attr\">{</span>\n  <span class=\"hljs-attr\">\"min_score\"</span>: <span class=\"hljs-string\">0.6,</span>\n  <span class=\"hljs-attr\">\"query\"</span>: <span class=\"hljs-string\">{</span>\n    <span class=\"hljs-attr\">\"bool\"</span>: <span class=\"hljs-string\">{</span>\n      <span class=\"hljs-attr\">\"should\"</span>: <span class=\"hljs-string\">[</span>\n        <span class=\"hljs-attr\">{</span>\n          <span class=\"hljs-attr\">\"bool\"</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">\"must\"</span>: <span class=\"hljs-string\">[</span>\n              <span class=\"hljs-attr\">{</span>\n                <span class=\"hljs-attr\">\"match_phrase\"</span>: <span class=\"hljs-string\">{</span>\n                  <span class=\"hljs-attr\">\"x\"</span>: <span class=\"hljs-string\">\"x of 1\"</span>\n                <span class=\"hljs-attr\">}</span>\n              <span class=\"hljs-attr\">},</span>\n              <span class=\"hljs-attr\">{</span>\n                <span class=\"hljs-attr\">\"match_phrase\"</span>: <span class=\"hljs-string\">{</span>\n                  <span class=\"hljs-attr\">\"y\"</span>: <span class=\"hljs-string\">\"y of 1\"</span>\n                <span class=\"hljs-attr\">}</span>\n              <span class=\"hljs-attr\">}</span>\n            <span class=\"hljs-attr\">]</span>\n          <span class=\"hljs-attr\">}</span>\n        <span class=\"hljs-attr\">},</span>\n        <span class=\"hljs-attr\">{</span>\n          <span class=\"hljs-attr\">\"bool\"</span>: <span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">\"must\"</span>: <span class=\"hljs-string\">[</span>\n              <span class=\"hljs-attr\">{</span>\n                <span class=\"hljs-attr\">\"match_phrase\"</span>: <span class=\"hljs-string\">{</span>\n                  <span class=\"hljs-attr\">\"x\"</span>: <span class=\"hljs-string\">\"x of 2\"</span>\n                <span class=\"hljs-attr\">}</span>\n              <span class=\"hljs-attr\">},</span>\n              <span class=\"hljs-attr\">{</span>\n                <span class=\"hljs-attr\">\"match_phrase\"</span>: <span class=\"hljs-string\">{</span>\n                  <span class=\"hljs-attr\">\"y\"</span>: <span class=\"hljs-string\">\"y of 2\"</span>\n                <span class=\"hljs-attr\">}</span>\n              <span class=\"hljs-attr\">}</span>\n            <span class=\"hljs-attr\">]</span>\n          <span class=\"hljs-attr\">}</span>\n        <span class=\"hljs-attr\">}</span>\n      <span class=\"hljs-attr\">]</span>\n    <span class=\"hljs-attr\">}</span>\n  <span class=\"hljs-attr\">}</span>\n<span class=\"hljs-attr\">}</span>\n</code></pre>\n  </body>\n</html>\n"}}},"__N_SSG":true}